drop table if exists t1, t2, t3, t4, t5, t6, t7, t8, t9, job0, job1, job2, job3;
create table t1 (id integer, x integer) engine=INNODB;
insert into t1 values(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5);
create table t2 (id integer primary key, x integer) engine=INNODB;
insert into t2 values(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5);
create table t3 (id integer primary key, x integer, unique key x(x)) engine=INNODB;
insert into t3 values(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5);
create table t4 (id integer primary key, x integer, key x(x)) engine=INNODB;
create table t5 (id integer primary key, x integer, key x(x)) engine=INNODB;
create table t6 (id integer primary key,
x integer,
y integer,
unique key x(x),
key y(y)) engine=INNODB;
create table t7 (id integer, x integer) engine=INNODB;
#########################################################################
###
### (1.1) Basic syntax
###
#########################################################################
set autocommit=1;
select 1 for update skip locked;
1
1
select * from nonexistence for update skip locked;
ERROR 42S02: Table 'test.nonexistence' doesn't exist
select 1 for update nowait;
1
1
select * from nonexistence for update nowait;
ERROR 42S02: Table 'test.nonexistence' doesn't exist
#########################################################################
###
### (1.2) 'SKIP', 'LOCKED', and 'NOWAIT' are not reserved key words
###
#########################################################################
create database skip;
use skip;
create table skip (skip int primary key) engine=innodb;
insert into skip values (1), (2), (3);
select skip.skip.skip from skip.skip where skip.skip.skip = 2;
skip
2
select skip as locked from skip where skip = 2;
locked
2
select * from skip where skip > 9 for update skip locked;
skip
select * from skip where skip > 9 for update nowait;
skip
update skip set skip = 4 where skip = 2;
select skip as nowait from skip where skip = 4;
nowait
4
drop database skip;
create database locked;
use locked;
create table locked (locked int primary key) engine=innodb;
insert into locked values (1), (2), (3);
select locked.locked.locked from locked.locked where locked.locked.locked = 2;
locked
2
select locked as nowait from locked where locked = 2;
nowait
2
select * from locked where locked > 9 for update skip locked;
locked
select * from locked where locked > 9 for update nowait;
locked
update locked set locked = 4 where locked = 2;
select locked as skip from locked where locked = 4;
skip
4
drop database locked;
create database nowait;
use nowait;
create table nowait (nowait int primary key) engine=innodb;
insert into nowait values (1), (2), (3);
select nowait.nowait.nowait from nowait.nowait where nowait.nowait.nowait = 2;
nowait
2
select nowait as skip from nowait where nowait = 2;
skip
2
select * from nowait where nowait > 9 for update skip locked;
nowait
select * from nowait where nowait > 9 for update nowait;
nowait
update nowait set nowait = 4 where nowait = 2;
select nowait as locked from nowait where nowait = 4;
locked
4
drop database nowait;
use test;
#########################################################################
###
### (1.3) Without pirmary key: Locks on all rows
###
#########################################################################
set autocommit=0;
SELECT * from t1 where id = 1 FOR UPDATE;
id	x
1	1
UPDATE t1 set x = 10001 where id = 1;
SELECT id, x from t1 where id = 1;
id	x
1	10001
UPDATE t1 set x = 1 where id = 1;
SELECT id, x from t1 where id = 1;
id	x
1	1
set autocommit=0;
lock will skip
SELECT * from t1 where id >= 0 FOR UPDATE SKIP LOCKED;
id	x
lock will skip
SELECT * from t1 order by id FOR UPDATE SKIP LOCKED;
id	x
lock will not wait, expecting error
SELECT * from t1 where id = 1 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
#########################################################################
###
### (1.4) Without pirmary key: Locks on some rows with 'limit x'
###
#########################################################################
set autocommit=0;
SELECT * from t1 where id = 1 limit 1 FOR UPDATE;
id	x
1	1
set autocommit=0;
lock will skip
SELECT * from t1 where id >= 0 FOR UPDATE SKIP LOCKED;
id	x
2	2
3	3
4	4
5	5
lock will skip
SELECT * from t1 order by id FOR UPDATE SKIP LOCKED;
id	x
2	2
3	3
4	4
5	5
lock will not wait, expecting error
SELECT * from t1 where id = 1 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
#########################################################################
###
### (1.5) With pirmary key: Locks only on the record (covering index)
###
#########################################################################
set autocommit=0;
SELECT * from t2 where id = 1 FOR UPDATE;
id	x
1	1
set autocommit=0;
lock will skip
SELECT * from t2 where id >= 0 and id <= 3 FOR UPDATE SKIP LOCKED;
id	x
0	0
2	2
3	3
set autocommit=0;
lock will skip
SELECT * from t2 where id >= 0  FOR UPDATE SKIP LOCKED;
id	x
5	5
lock will skip
SELECT * from t2 order by id FOR UPDATE SKIP LOCKED;
id	x
5	5
lock will not wait, expecting error
SELECT * from t2 where id = 1 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (1.6) With pirmary key: Encountering locked rows after at least one match already (covering index) with NOWAIT
###
#########################################################################
set autocommit=0;
SELECT * from t2 where id >= 2 and id <= 5 FOR UPDATE;
id	x
2	2
3	3
4	4
5	5
set autocommit=0;
lock will not wait, expecting error
SELECT * from t2 where id >= 0 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
set autocommit=0;
lock will not wait, expecting error
SELECT * from t2 where id > 0 and id < 3 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
SELECT * from t2 order by id FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (2.1.1) With unique secondary key: Single lock on the unique secondary key (covering index)
###
#########################################################################
set autocommit=0;
SELECT x from t3 where x = 1 FOR UPDATE;
x
1
set autocommit=0;
lock will skip
SELECT x from t3 where x >= 0 and x <= 3 FOR UPDATE SKIP LOCKED;
x
0
2
3
set autocommit=0;
lock will skip
SELECT x from t3 where x >= 0 FOR UPDATE SKIP LOCKED;
x
5
lock will skip
SELECT x from t3 order by x FOR UPDATE SKIP LOCKED;
x
5
lock will not wait, expecting error
SELECT x from t3 where x = 1 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (2.1.2) With unique secondary key: Range locks on the unique secondary key (covering index)
###
#########################################################################
set autocommit=0;
SELECT x from t3 where x >= 1 and x < 4 FOR UPDATE;
x
1
2
3
set autocommit=0;
lock will skip
SELECT x from t3 where x >= 0 and x <= 4 FOR UPDATE SKIP LOCKED;
x
set autocommit=0;
lock will skip
SELECT x from t3 where x >= 0 FOR UPDATE SKIP LOCKED;
x
lock will skip
SELECT x from t3 order by x FOR UPDATE SKIP LOCKED;
x
lock will not wait, expecting error
SELECT x from t3 where x = 1 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (2.2) With unique secondary key: Encountering locked rows after at least one match already (covering index) with NOWAIT
###
#########################################################################
set autocommit=0;
SELECT x from t3 where x >= 2 and x < 5 FOR UPDATE;
x
2
3
4
set autocommit=0;
lock will not wait, expecting error
SELECT x from t3 where x > 0 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
set autocommit=0;
lock will not wait, expecting error
SELECT x from t3 where x >= 0 and x < 3 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (3.1) With non-unique secondary key: Locks on the non-unique secondary key (covering index)
###
#########################################################################
set autocommit=0;
SELECT x from t4 where x = 1 FOR UPDATE;
x
1
1
1
set autocommit=0;
lock will skip
SELECT x from t4 where x >= 0 and x <= 2 FOR UPDATE SKIP LOCKED;
x
0
0
0
2
2
2
set autocommit=0;
lock will skip
SELECT x from t4 where x > 0 limit 3 FOR UPDATE SKIP LOCKED;
x
3
3
4
lock will skip
SELECT x from t4 order by x limit 3 FOR UPDATE SKIP LOCKED;
x
3
3
4
lock will not wait, expecting error
SELECT x from t4 where x = 1 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (3.2) With non-unique secondary key: Locks on the non-unique secondary key (covering index)
###
#########################################################################
set autocommit=0;
SELECT x from t4 where x = 0 limit 1 FOR UPDATE;
x
0
lock will skip
set autocommit=0;
SELECT x from t4 where x = 0 limit 1 FOR UPDATE SKIP LOCKED;
x
0
lock will skip
set autocommit=0;
SELECT x from t4 where x = 0 limit 1 FOR UPDATE SKIP LOCKED;
x
0
lock will not wait, expecting error
SELECT x from t4 where x = 0 limit 1 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (3.3) With non-unique secondary key: Locks on the non-unique secondary key (non-covering index)
###
#########################################################################
set autocommit=0;
SELECT id from t4 where x = 0 limit 1 FOR UPDATE;
id
0
lock will skip
set autocommit=0;
SELECT id from t4 where x = 0 limit 1 FOR UPDATE SKIP LOCKED;
id
1
lock will skip
set autocommit=0;
SELECT id from t4 where x = 0 limit 1 FOR UPDATE SKIP LOCKED;
id
2
lock will not wait, expecting error
SELECT id from t4 where x = 0 limit 1 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (3.4) With non-unique secondary key: Locks on the non-unique secondary key (non-covering index)
###
#########################################################################
set autocommit=0;
SELECT id from t4 where x = 0 limit 3 FOR UPDATE;
id
0
1
2
lock will skip
set autocommit=0;
SELECT id from t4 where x = 1 limit 3 FOR UPDATE SKIP LOCKED;
id
3
4
5
lock will skip
set autocommit=0;
SELECT id from t4 where x = 2 limit 3 FOR UPDATE SKIP LOCKED;
id
6
7
8
commit;
commit;
commit;
#########################################################################
###
### (4) Locks on both the primary key and the unique secondary key
###
#########################################################################
set autocommit=0;
SELECT * from t3 where id = 1 FOR UPDATE;
id	x
1	1
set autocommit=0;
lock will skip
SELECT * from t3 where id >= 0 and id <= 3 FOR UPDATE SKIP LOCKED;
id	x
0	0
2	2
3	3
set autocommit=0;
lock will skip
SELECT * from t3 where id >= 0 FOR UPDATE SKIP LOCKED;
id	x
5	5
lock will skip
SELECT * from t3 order by id FOR UPDATE SKIP LOCKED;
id	x
5	5
lock will not wait, expecting error
SELECT * from t3 where id = 1 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (5.1.1) Large table with primary key and unique secondary key :
###         Primary key and SKIP LOCKED
###
#########################################################################
set autocommit=0;
SELECT * from t5
where (id > 5000 and id < 5006) or
(id >= 6000 and id <= 6006) FOR UPDATE;
id	x
5001	5001
5002	5002
5003	5003
5004	5004
5005	5005
6000	6000
6001	6001
6002	6002
6003	6003
6004	6004
6005	6005
6006	6006
set autocommit=0;
lock will skip
SELECT * from t5
where (id = 1000) or
(id = 5003) or
(id = 5050) or
(id = 6003) or
(id = 6050) FOR UPDATE SKIP LOCKED;
id	x
1000	1000
5050	5050
6050	6050
set autocommit=0;
lock will skip
SELECT * from t5
where (id = 1000) or
(id >= 5003) and (id <= 5010) or
(id = 5050) or
(id >= 6003) and (id <= 6010) or
(id = 6050) FOR UPDATE SKIP LOCKED;
id	x
5007	5007
5008	5008
5009	5009
5010	5010
6008	6008
6009	6009
6010	6010
commit;
commit;
commit;
#########################################################################
###
### (5.1.2) Large table with primary key and unique secondary key :
###         Primary key and NOWAIT
###
#########################################################################
set autocommit=0;
SELECT * from t5
where (id > 5000 and id < 5006) or
(id >= 6000 and id <= 6006) FOR UPDATE;
id	x
5001	5001
5002	5002
5003	5003
5004	5004
5005	5005
6000	6000
6001	6001
6002	6002
6003	6003
6004	6004
6005	6005
6006	6006
set autocommit=0;
lock will not wait, expecting error
SELECT * from t5
where (id = 1000) or
(id = 5003) or
(id = 5050) FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
set autocommit=0;
lock will not wait, expecting error
SELECT * from t5
where (id = 1000) or
(id >= 5003) and (id <= 5010) or
(id = 5050) FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (5.2.1) Large table with primary key and unique secondary key :
###         Secondary key and SKIP LOCKED
###
#########################################################################
set autocommit=0;
SELECT * from t5
where (x > 5000 and x < 5006) or
(x >= 6000 and x <= 6006) FOR UPDATE;
id	x
5001	5001
5002	5002
5003	5003
5004	5004
5005	5005
6000	6000
6001	6001
6002	6002
6003	6003
6004	6004
6005	6005
6006	6006
set autocommit=0;
lock will skip
SELECT * from t5
where (x = 1000) or
(x = 5003) or
(x = 5050) or
(x = 6003) or
(x = 6050) FOR UPDATE SKIP LOCKED;
id	x
1000	1000
5050	5050
6050	6050
set autocommit=0;
lock will skip
SELECT * from t5
where (x = 1000) or
(x >= 5003) and (x <= 5010) or
(x = 5050) or
(x >= 6003) and (x <= 6010) or
(x = 6050) FOR UPDATE SKIP LOCKED;
id	x
5007	5007
5008	5008
5009	5009
5010	5010
6008	6008
6009	6009
6010	6010
commit;
commit;
commit;
#########################################################################
###
### (5.2.2) Large table with primary key and unique secondary key :
###         Secondary key and NOWAIT
###
#########################################################################
set autocommit=0;
SELECT * from t5
where (x > 5000 and x < 5006) or
(x >= 6000 and x <= 6006) FOR UPDATE;
id	x
5001	5001
5002	5002
5003	5003
5004	5004
5005	5005
6000	6000
6001	6001
6002	6002
6003	6003
6004	6004
6005	6005
6006	6006
set autocommit=0;
lock will not wait, expecting error
SELECT * from t5
where (x = 1000) or
(x = 5003) or
(x = 5050) FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
set autocommit=0;
lock will not wait, expecting error
SELECT * from t5
where (x = 1000) or
(x >= 5003) and (x <= 5010) or
(x = 5050) FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (5.3.1) Large table with primary key and unique secondary key :
###         Primary key, Secondary key, and SKIP LOCKED
###
#########################################################################
set autocommit=0;
SELECT * from t5
where (id > 5000 and id < 5006) or
(id >= 6000 and id <= 6006) or
(x > 7000 and x < 7006) or
(x > 8000 and x < 8006) FOR UPDATE;
id	x
7001	7001
7002	7002
7003	7003
7004	7004
7005	7005
8001	8001
8002	8002
8003	8003
8004	8004
8005	8005
5001	5001
5002	5002
5003	5003
5004	5004
5005	5005
6000	6000
6001	6001
6002	6002
6003	6003
6004	6004
6005	6005
6006	6006
set autocommit=0;
lock will skip
SELECT * from t5
where (id = 1000) or
(id = 5003) or
(x = 6003) FOR UPDATE SKIP LOCKED;
id	x
1000	1000
lock will skip
SELECT * from t5
where (x = 1000) or
(x = 5003) or
(id = 6003) FOR UPDATE SKIP LOCKED;
id	x
1000	1000
set autocommit=0;
lock will skip
SELECT * from t5
where (id > 5000) and (id < 5005) or
(x > 6003) and (x < 6008) FOR UPDATE SKIP LOCKED;
id	x
lock will skip
SELECT * from t5
where (id = 5003) or
(x = 6003) order by id FOR UPDATE SKIP LOCKED;
id	x
commit;
commit;
commit;
#########################################################################
###
### (5.3.2) Large table with primary key and unique secondary key :
###         Primary key, Secondary key, and NOWAIT
###
#########################################################################
set autocommit=0;
SELECT * from t5
where (id > 5000 and id < 5005) or
(id >= 6000 and id <= 6005) or
(x > 7000 and x < 7005) or
(x > 8000 and x < 8005) FOR UPDATE;
id	x
7001	7001
7002	7002
7003	7003
7004	7004
8001	8001
8002	8002
8003	8003
8004	8004
5001	5001
5002	5002
5003	5003
5004	5004
6000	6000
6001	6001
6002	6002
6003	6003
6004	6004
6005	6005
set autocommit=0;
lock will not wait, expecting error
SELECT * from t5
where (id = 1000) or
(id = 5003) or
(x = 6003) FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
SELECT * from t5
where (x = 1000) or
(x = 5003) or
(id = 6003) FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
set autocommit=0;
SELECT * from t5
where (id > 5000) and (id < 5005) or
(x > 6003) and (x < 6008) FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
SELECT * from t5
where (id = 5003) or
(x = 6003) order by id FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (5.4.1.1) Multi-table joins & ranges
###
#########################################################################
set autocommit=0;
select t2.id, t3.id, t5.id
from t2, t3, t5
where (t2.id >= 2 and t2.id <= 4) and
(t3.id >= 3 and t3.id < 6) and
(t2.id = t3.id and t5.id > t3.id) and
((t5.id between 1000 and 1002) or
(t5.x between 2000 and 2002)) FOR UPDATE;
id	id	id
3	3	2000
3	3	2001
3	3	2002
3	3	1000
3	3	1001
3	3	1002
4	4	2000
4	4	2001
4	4	2002
4	4	1000
4	4	1001
4	4	1002
set autocommit=0;
select t2.id
from t2
where t2.id > 0 FOR UPDATE SKIP LOCKED;
id
select t2.x
from t2
where t2.x > 0 FOR UPDATE SKIP LOCKED;
x
select t3.id
from t3
where t3.id > 0 FOR UPDATE SKIP LOCKED;
id
1
2
5
select t5.id
from t5
where t5.id > 999 and t5.id < 1005 FOR UPDATE SKIP LOCKED;
id
1004
select t5.id, t5.x
from t5
where (t5.id > 999 and t5.id < 1005) or
(t5.x > 1999 and t5.x < 2005) FOR UPDATE SKIP LOCKED;
id	x
2004	2004
1004	1004
select t2.id, t4.x, t5.id
from t2, t4, t5
where (t2.id in (3, 5)) and
(t2.id = t4.x) and
(t4.x < t5.id and t5.x in (900, 1001, 1010, 2001, 3000)) FOR UPDATE SKIP LOCKED;
id	x	id
set autocommit=0;
select t2.id
from t2
where t2.id > 0 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select t2.x
from t2
where t2.x >= 3 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select t3.id
from t3
where t3.id > 3 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select t5.id
from t5
where t5.id > 999 and t5.id < 1005 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select t2.id, t4.x, t5.id
from t2, t4, t5
where (t2.id in (3, 5)) and
(t2.id = t4.x) and
(t4.x < t5.id and t5.x in (900, 1001, 1010, 2001, 3000)) FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (5.4.1.2) Multi-table joins & ranges
###
#########################################################################
set autocommit=0;
select t2.id, t3.id, t5.x
from t2, t3, t5
where (t2.id = t3.id) and
(t3.x = t5.id) and
((t5.id > 5003 and t5.id < 5008) or (t5.x >= 3 and t5.x <= 4)) FOR UPDATE;
id	id	x
3	3	3
4	4	4
set autocommit=0;
select t2.id, t5.x
from t2, t5
where (t2.id = t5.id) and
(t5.x in (1, 2, 3, 4, 5, 5000)) FOR UPDATE SKIP LOCKED;
id	x
select t2.id, t3.id, t4.id, t5.x
from t2, t3, t4, t5
where (t2.id >= 1) and (t2.id < t5.x) or
(t3.id <= 4) and (t3.id < t5.id) or
(t4.x < 6) and (t4.x < t5.x) or
(t5.id in (1, 3, 5, 5001, 5005, 5010, 5050)) FOR UPDATE SKIP LOCKED;
id	id	id	x
set autocommit=0;
select t2.id, t3.id, t4.id, t5.x
from t2, t3, t4, t5
where (t2.id >= 1) and (t2.id < t5.x) or
(t3.id <= 4) and (t3.id < t5.id) or
(t4.x < 6) and (t4.x < t5.x) or
(t5.id in (5001, 5002, 5005, 5008, 5010, 5050, 6000)) FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (5.4.2.1) Sub-queries
###
#########################################################################
set autocommit=0;
select t2.id, t2.x
from t2
where t2.id in (select t3.x from t3 where t3.x between 2 and 4) FOR UPDATE;
id	x
2	2
3	3
4	4
set autocommit=0;
select t2.id, t2.x
from t2
where t2.x >= 0 and t2.x <= 5 FOR UPDATE SKIP LOCKED;
id	x
0	0
1	1
set autocommit=0;
select t2.id, t2.x
from t2
where t2.x >= 0 and t2.x <= 5 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (5.4.2.2) Sub-queries
###
#########################################################################
set autocommit=0;
select t2.id, t2.x
from t2
where t2.id in (select t3.x
from t3
where t3.x not in (select t5.id
from t5
where t5.x between 1 and 3)) FOR UPDATE;
id	x
0	0
4	4
5	5
set autocommit=0;
select t3.id, t3.x
from t3
where t3.x in (select t2.id
from t2
where t2.id in (select t5.id
from t5
where t5.x >= 0 and t5.x <= 5)) FOR UPDATE SKIP LOCKED;
id	x
1	1
2	2
3	3
4	4
5	5
set autocommit=0;
select t5.id
from t5, t3
where t5.x >= t3.x and t3.x < 5 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
commit;
commit;
commit;
#########################################################################
###
### (5.4.2.3) Sub-queries
###
#########################################################################
set autocommit=0;
select *
from t2, (select sum(t3.id) as t3_id_sum, t3.x
from t3
group by t3.x
having t3.x > 2) as derived_t3
where t2.id < derived_t3.t3_id_sum and t2.x > 1 and t2.x < 3 FOR UPDATE;
id	x	t3_id_sum	x
2	2	3	3
2	2	4	4
2	2	5	5
set autocommit=0;
select *
from t3, (select sum(t5.id) as t5_id_sum, t5.x
from t5
group by t5.x
having t5.x > 2 and t5.x < 5) as derived_t5
where t3.id < derived_t5.t5_id_sum and t3.x >= 0 FOR UPDATE SKIP LOCKED;
id	x	t5_id_sum	x
0	0	3	3
1	1	3	3
2	2	3	3
0	0	4	4
1	1	4	4
2	2	4	4
3	3	4	4
set autocommit=0;
select *
from t2, (select sum(t5.id) as t5_id_sum, t5.x
from t5
group by t5.x
having t5.x >= 4 and t5.x <= 5) as derived_t5
where t2.id <= derived_t5.t5_id_sum and t2.x >= 1 FOR UPDATE SKIP LOCKED;
id	x	t5_id_sum	x
commit;
commit;
commit;
#########################################################################
###
### (6) SELECT ... LOCK IN SHARE MODE
###
#########################################################################
set autocommit=0;
select id
from t5
where (id > 1000 and id < 1005) or
(x >= 2000 and x <= 2005) LOCK IN SHARE MODE;
id
2000
2001
2002
2003
2004
2005
1001
1002
1003
1004
set autocommit=0;
select id
from t5
where id = 999 or id = 1001 or x = 2002 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select id
from t5
where id = 999 or id = 1001 or x = 2002 FOR UPDATE SKIP LOCKED;
id
999
set autocommit=0;
select id, x
from t5
where id > 999 and x > 1000 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select id, x
from t5
where (id > 999 and id < 1008) or (x > 2002 and x <= 2006) FOR UPDATE SKIP LOCKED;
id	x
1000	1000
1006	1006
1007	1007
commit;
commit;
commit;
#########################################################################
###
### (7.1) INSERT, UPDATE, and DELETE
###
#########################################################################
create table t8 (id integer primary key, x integer, key x(x)) engine=INNODB;
set autocommit=0;
insert into t8 values(0, 0), (2, 2), (4, 4), (6, 6);
commit;
insert into t8 values(1, 1), (3, 3), (5, 5), (7, 7);
set autocommit=0;
select * from t8 where id >= 0 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t8 where id >= 0 FOR UPDATE SKIP LOCKED;
id	x
0	0
2	2
4	4
6	6
set autocommit=0;
select * from t8 where id >= 0 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t8 where id >= 0 FOR UPDATE SKIP LOCKED;
id	x
commit;
commit;
commit;
update t8 set x = 8 where id = 3 or x > 5;
select * from t8 where id >= 0 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t8 where id >= 0 FOR UPDATE SKIP LOCKED;
id	x
select * from t8 where id >= 0 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t8 where id >= 0 FOR UPDATE SKIP LOCKED;
id	x
commit;
commit;
commit;
delete from t8 where id = 2 or x = 6;
select * from t8 where id >= 0 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t8 where id >= 0 FOR UPDATE SKIP LOCKED;
id	x
select * from t8 where id >= 0 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t8 where id >= 0 FOR UPDATE SKIP LOCKED;
id	x
commit;
commit;
commit;
#########################################################################
###
### (7.2) Large number of connections
###
#########################################################################
#########################################################################
###
### (7.2.1) Query multiple big ranges on the primary key :
###         index range and locks on range
###
#########################################################################
explain extended
select id
from t5
where (id > 1 and id < 4999) or (id > 5001 and id < 9999) FOR UPDATE;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t5	range	PRIMARY	PRIMARY	4	NULL	9990	100.00	Using where; Using index
Warnings:
Note	1003	/* select#1 */ select `test`.`t5`.`id` AS `id` from `test`.`t5` where (((`test`.`t5`.`id` > 1) and (`test`.`t5`.`id` < 4999)) or ((`test`.`t5`.`id` > 5001) and (`test`.`t5`.`id` < 9999)))
select id
from t5
where (id > 1 and id < 4999) or (id > 5001 and id < 9999) FOR UPDATE;
set autocommit=0;
select id from t5 where id > 0 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select id from t5 where id > 0 FOR UPDATE SKIP LOCKED;
id
1
5000
5001
10000
commit;
set autocommit=0;
select id from t5 where id > 0 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select id from t5 where id > 0 FOR UPDATE SKIP LOCKED;
id
1
5000
5001
10000
set autocommit=0;
select id from t5 where id >= 0 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select id from t5 where id >= 0 FOR UPDATE SKIP LOCKED;
id
#########################################################################
###
### (7.2.2) Query multiple big ranges on unique secondary key :
###         index scan and locks on all
###
#########################################################################
set autocommit=0;
select x from t6 where x >= 0 FOR UPDATE SKIP LOCKED;
x
0
#########################################################################
###
### (7.2.3) Query multiple small ranges on unique secondary key :
###         index range and locks on range
###
#########################################################################
explain extended
select x
from t6
where (x > 4998 and x < 5001) or (x >= 9998 and x <= 9999) FOR UPDATE;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t6	range	x	x	5	NULL	3	100.00	Using where; Using index
Warnings:
Note	1003	/* select#1 */ select `test`.`t6`.`x` AS `x` from `test`.`t6` where (((`test`.`t6`.`x` > 4998) and (`test`.`t6`.`x` < 5001)) or ((`test`.`t6`.`x` >= 9998) and (`test`.`t6`.`x` <= 9999)))
select x
from t6
where (x > 4998 and x < 5001) or (x >= 9998 and x <= 9999) FOR UPDATE;
set autocommit=0;
select x from t6 where x >= 4997 or x >= 9997 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select x from t6 where x >= 4997 and x <= 5001 or x >= 9997 and x <= 10000 FOR UPDATE SKIP LOCKED;
x
4997
4998
9997
commit;
set autocommit=0;
select x from t6 where x >= 4997 or x >= 9997 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select x from t6 where x >= 4997 and x <= 5001 or x >= 9997 and x <= 10000 FOR UPDATE SKIP LOCKED;
x
4997
4998
9997
set autocommit=0;
select x from t6 where x > 4995 or x >= 9996 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select x from t6 where x > 4995 and x < 5002 or x > 9995 and x <= 10000 FOR UPDATE SKIP LOCKED;
x
4996
9996
#########################################################################
###
### (7.2.4) Lock multiple locks on unique secondary key
###
#########################################################################
explain extended
select x
from t6
where x in (4998, 5000, 5002, 5005) FOR UPDATE;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t6	range	x	x	5	NULL	4	100.00	Using where; Using index
Warnings:
Note	1003	/* select#1 */ select `test`.`t6`.`x` AS `x` from `test`.`t6` where (`test`.`t6`.`x` in (4998,5000,5002,5005))
x
4998
5000
5002
5005
ERROR HY000: Failed to lock a record and didn't wait
x
4999
5001
5003
5004
ERROR HY000: Failed to lock a record and didn't wait
x
4999
5001
5003
5004
ERROR HY000: Failed to lock a record and didn't wait
x
4996
4997
#########################################################################
###
### (7.2.5) Query multiple small ranges on non-unique secondary key :
###         index range and locks on range
###
#########################################################################
explain extended
select id, y
from t6
where (y > 5 and y < 10) or (y >= 20 and y <= 30) limit 10 FOR UPDATE;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t6	range	y	y	5	NULL	1498	100.00	Using where; Using index
Warnings:
Note	1003	/* select#1 */ select `test`.`t6`.`id` AS `id`,`test`.`t6`.`y` AS `y` from `test`.`t6` where (((`test`.`t6`.`y` > 5) and (`test`.`t6`.`y` < 10)) or ((`test`.`t6`.`y` >= 20) and (`test`.`t6`.`y` <= 30))) limit 10
select id, y
from t6
where (y > 5 and y < 10) or (y >= 20 and y <= 30) limit 10 FOR UPDATE;
id	y
600	6
601	6
602	6
603	6
604	6
605	6
606	6
607	6
608	6
609	6
set autocommit=0;
select x, y from t6 where y >= 5 or y >= 20 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select x, y from t6 where y >= 5 and y <= 10 or y >= 15 and y <= 30 limit 10 FOR UPDATE SKIP LOCKED;
x	y
500	5
501	5
502	5
503	5
504	5
505	5
506	5
507	5
508	5
509	5
commit;
set autocommit=0;
select x, y from t6 where y >= 5 or y >= 20 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select x, y from t6 where y >= 5 and y <= 10 or y >= 15 and y <= 30 limit 10 FOR UPDATE SKIP LOCKED;
x	y
500	5
501	5
502	5
503	5
504	5
505	5
506	5
507	5
508	5
509	5
set autocommit=0;
select x, y from t6 where y >= 5 or y >= 20 order by y desc FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select x, y from t6 where y >= 5 and y <= 10 or y >= 15 and y <= 30 order by y desc limit 10 FOR UPDATE SKIP LOCKED;
x	y
3099	30
3098	30
3097	30
3096	30
3095	30
3094	30
3093	30
3092	30
3091	30
3090	30
#########################################################################
###
### (7.2.6) Range query with limit on primary key :
###         index range and locks on range
###
#########################################################################
select id
from t5
where id > 1 limit 2 FOR UPDATE;
id
2
3
set autocommit=0;
select id from t5 where id > 0 limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select id from t5 where id > 0 limit 2 FOR UPDATE SKIP LOCKED;
id
1
4
commit;
set autocommit=0;
select id from t5 where id > 0 limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select id from t5 where id > 0 limit 2 FOR UPDATE SKIP LOCKED;
id
1
4
set autocommit=0;
select id from t5 where id >= 0 limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select id from t5 where id >= 0 limit 2 FOR UPDATE SKIP LOCKED;
id
5
6
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
7
8
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
9
10
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
11
12
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
13
14
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
15
16
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
17
18
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
19
20
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
21
22
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
23
24
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
25
26
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
27
28
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
29
30
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
31
32
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
33
34
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
35
36
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
37
38
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
39
40
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
41
42
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
43
44
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
45
46
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
47
48
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
49
50
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
51
52
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
53
54
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
55
56
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
57
58
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
59
60
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
61
62
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
63
64
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
65
66
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
67
68
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
69
70
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
71
72
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
73
74
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
75
76
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
77
78
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
79
80
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
81
82
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
83
84
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
85
86
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
87
88
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
89
90
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
91
92
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
93
94
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
95
96
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
97
98
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
99
100
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
101
102
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
103
104
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
105
106
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
107
108
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
109
110
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
111
112
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
113
114
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
115
116
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
117
118
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
119
120
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
121
122
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
123
124
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
125
126
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
127
128
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
129
130
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
131
132
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
133
134
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
135
136
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
137
138
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
139
140
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
141
142
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
143
144
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
145
146
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
147
148
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
149
150
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
151
152
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
153
154
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
155
156
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
157
158
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
159
160
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
161
162
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
163
164
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
165
166
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
167
168
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
169
170
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
171
172
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
173
174
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
175
176
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
177
178
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
179
180
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
181
182
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
183
184
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
185
186
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
187
188
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
189
190
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
191
192
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
193
194
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
195
196
set autocommit=0;
select id from t5 where id > 0 limit 2  FOR UPDATE SKIP LOCKED;;
id
197
198
#########################################################################
###
### (7.2.7) Range query with limit on secondary key :
###         index range and locks on range
###
#########################################################################
select id
from t6
where x > 1 limit 1 FOR UPDATE;
id
2
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE NOWAIT;
x
1
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;
x
1
commit;
set autocommit=0;
select x from t6 where x >= 0 limit 1 FOR UPDATE NOWAIT;
x
0
select x from t6 where x >= 0 limit 1 FOR UPDATE SKIP LOCKED;
x
0
set autocommit=0;
select x from t6 where x >= 0 limit 1 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select x from t6 where x >= 0 limit 1 FOR UPDATE SKIP LOCKED;
x
1
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
3
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
4
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
5
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
6
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
7
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
8
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
9
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
10
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
11
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
12
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
13
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
14
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
15
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
16
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
17
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
18
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
19
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
20
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
21
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
22
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
23
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
24
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
25
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
26
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
27
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
28
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
29
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
30
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
31
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
32
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
33
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
34
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
35
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
36
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
37
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
38
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
39
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
40
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
41
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
42
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
43
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
44
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
45
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
46
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
47
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
48
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
49
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
50
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
51
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
52
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
53
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
54
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
55
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
56
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
57
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
58
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
59
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
60
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
61
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
62
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
63
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
64
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
65
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
66
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
67
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
68
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
69
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
70
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
71
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
72
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
73
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
74
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
75
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
76
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
77
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
78
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
79
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
80
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
81
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
82
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
83
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
84
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
85
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
86
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
87
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
88
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
89
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
90
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
91
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
92
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
93
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
94
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
95
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
96
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
97
set autocommit=0;
select x from t6 where x > 0 limit 1 FOR UPDATE SKIP LOCKED;;
x
98
#########################################################################
###
### (7.2.8) Range query with limit on both primary and secondary key :
###         index range and locks on range
###
#########################################################################
select * from t6 where x > 1 order by x limit 2 FOR UPDATE;
id	x	y
2	2	0
3	3	0
update t6 set x = 10002, y = 10002 where id = 2;
select id, x, y from t6 where id = 2;
id	x	y
2	10002	10002
update t6 set x = 10003, y = 10003 where id = 3;
select id, x, y from t6 where id = 3;
id	x	y
3	10003	10003
set autocommit=0;
select * from t6 where id > 1 order by id limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where id > 1 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
4	4	0
5	5	0
update t6 set x = 10004, y = 10004 where id = 4;
select id, x, y from t6 where id = 4;
id	x	y
4	10004	10004
update t6 set x = 10005, y = 10005 where id = 5;
select id, x, y from t6 where id = 5;
id	x	y
5	10005	10005
commit;
set autocommit=0;
select * from t6 where id > 1 order by id limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where id > 1 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
4	10004	10004
5	10005	10005
update t6 set x = 10004, y = 10004 where id = 4;
select id, x, y from t6 where id = 4;
id	x	y
4	10004	10004
update t6 set x = 10005, y = 10005 where id = 5;
select id, x, y from t6 where id = 5;
id	x	y
5	10005	10005
set autocommit=0;
select * from t6 where id > 1 order by id limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where id > 1 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
6	6	0
7	7	0
update t6 set x = 10006, y = 10006 where id = 6;
select id, x, y from t6 where id = 6;
id	x	y
6	10006	10006
update t6 set x = 10007, y = 10007 where id = 7;
select id, x, y from t6 where id = 7;
id	x	y
7	10007	10007
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;;
id	x	y
1	1	0
8	8	0
update t6 set x = 10001, y = 10001 where id = 1;
select id, x, y from t6 where id = 1;
id	x	y
1	10001	10001
update t6 set x = 10008, y = 10008 where id = 8;
select id, x, y from t6 where id = 8;
id	x	y
8	10008	10008
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
9	9	0
10	10	0
update t6 set x = 10009, y = 10009 where id = 9;
select id, x, y from t6 where id = 9;
id	x	y
9	10009	10009
update t6 set x = 10010, y = 10010 where id = 10;
select id, x, y from t6 where id = 10;
id	x	y
10	10010	10010
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
11	11	0
12	12	0
update t6 set x = 10011, y = 10011 where id = 11;
select id, x, y from t6 where id = 11;
id	x	y
11	10011	10011
update t6 set x = 10012, y = 10012 where id = 12;
select id, x, y from t6 where id = 12;
id	x	y
12	10012	10012
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
13	13	0
14	14	0
update t6 set x = 10013, y = 10013 where id = 13;
select id, x, y from t6 where id = 13;
id	x	y
13	10013	10013
update t6 set x = 10014, y = 10014 where id = 14;
select id, x, y from t6 where id = 14;
id	x	y
14	10014	10014
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
15	15	0
16	16	0
update t6 set x = 10015, y = 10015 where id = 15;
select id, x, y from t6 where id = 15;
id	x	y
15	10015	10015
update t6 set x = 10016, y = 10016 where id = 16;
select id, x, y from t6 where id = 16;
id	x	y
16	10016	10016
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
17	17	0
18	18	0
update t6 set x = 10017, y = 10017 where id = 17;
select id, x, y from t6 where id = 17;
id	x	y
17	10017	10017
update t6 set x = 10018, y = 10018 where id = 18;
select id, x, y from t6 where id = 18;
id	x	y
18	10018	10018
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
19	19	0
20	20	0
update t6 set x = 10019, y = 10019 where id = 19;
select id, x, y from t6 where id = 19;
id	x	y
19	10019	10019
update t6 set x = 10020, y = 10020 where id = 20;
select id, x, y from t6 where id = 20;
id	x	y
20	10020	10020
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
21	21	0
22	22	0
update t6 set x = 10021, y = 10021 where id = 21;
select id, x, y from t6 where id = 21;
id	x	y
21	10021	10021
update t6 set x = 10022, y = 10022 where id = 22;
select id, x, y from t6 where id = 22;
id	x	y
22	10022	10022
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
23	23	0
24	24	0
update t6 set x = 10023, y = 10023 where id = 23;
select id, x, y from t6 where id = 23;
id	x	y
23	10023	10023
update t6 set x = 10024, y = 10024 where id = 24;
select id, x, y from t6 where id = 24;
id	x	y
24	10024	10024
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
25	25	0
26	26	0
update t6 set x = 10025, y = 10025 where id = 25;
select id, x, y from t6 where id = 25;
id	x	y
25	10025	10025
update t6 set x = 10026, y = 10026 where id = 26;
select id, x, y from t6 where id = 26;
id	x	y
26	10026	10026
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
27	27	0
28	28	0
update t6 set x = 10027, y = 10027 where id = 27;
select id, x, y from t6 where id = 27;
id	x	y
27	10027	10027
update t6 set x = 10028, y = 10028 where id = 28;
select id, x, y from t6 where id = 28;
id	x	y
28	10028	10028
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
29	29	0
30	30	0
update t6 set x = 10029, y = 10029 where id = 29;
select id, x, y from t6 where id = 29;
id	x	y
29	10029	10029
update t6 set x = 10030, y = 10030 where id = 30;
select id, x, y from t6 where id = 30;
id	x	y
30	10030	10030
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
31	31	0
32	32	0
update t6 set x = 10031, y = 10031 where id = 31;
select id, x, y from t6 where id = 31;
id	x	y
31	10031	10031
update t6 set x = 10032, y = 10032 where id = 32;
select id, x, y from t6 where id = 32;
id	x	y
32	10032	10032
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
33	33	0
34	34	0
update t6 set x = 10033, y = 10033 where id = 33;
select id, x, y from t6 where id = 33;
id	x	y
33	10033	10033
update t6 set x = 10034, y = 10034 where id = 34;
select id, x, y from t6 where id = 34;
id	x	y
34	10034	10034
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
35	35	0
36	36	0
update t6 set x = 10035, y = 10035 where id = 35;
select id, x, y from t6 where id = 35;
id	x	y
35	10035	10035
update t6 set x = 10036, y = 10036 where id = 36;
select id, x, y from t6 where id = 36;
id	x	y
36	10036	10036
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
37	37	0
38	38	0
update t6 set x = 10037, y = 10037 where id = 37;
select id, x, y from t6 where id = 37;
id	x	y
37	10037	10037
update t6 set x = 10038, y = 10038 where id = 38;
select id, x, y from t6 where id = 38;
id	x	y
38	10038	10038
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
39	39	0
40	40	0
update t6 set x = 10039, y = 10039 where id = 39;
select id, x, y from t6 where id = 39;
id	x	y
39	10039	10039
update t6 set x = 10040, y = 10040 where id = 40;
select id, x, y from t6 where id = 40;
id	x	y
40	10040	10040
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
41	41	0
42	42	0
update t6 set x = 10041, y = 10041 where id = 41;
select id, x, y from t6 where id = 41;
id	x	y
41	10041	10041
update t6 set x = 10042, y = 10042 where id = 42;
select id, x, y from t6 where id = 42;
id	x	y
42	10042	10042
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
43	43	0
44	44	0
update t6 set x = 10043, y = 10043 where id = 43;
select id, x, y from t6 where id = 43;
id	x	y
43	10043	10043
update t6 set x = 10044, y = 10044 where id = 44;
select id, x, y from t6 where id = 44;
id	x	y
44	10044	10044
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
45	45	0
46	46	0
update t6 set x = 10045, y = 10045 where id = 45;
select id, x, y from t6 where id = 45;
id	x	y
45	10045	10045
update t6 set x = 10046, y = 10046 where id = 46;
select id, x, y from t6 where id = 46;
id	x	y
46	10046	10046
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
47	47	0
48	48	0
update t6 set x = 10047, y = 10047 where id = 47;
select id, x, y from t6 where id = 47;
id	x	y
47	10047	10047
update t6 set x = 10048, y = 10048 where id = 48;
select id, x, y from t6 where id = 48;
id	x	y
48	10048	10048
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
49	49	0
50	50	0
update t6 set x = 10049, y = 10049 where id = 49;
select id, x, y from t6 where id = 49;
id	x	y
49	10049	10049
update t6 set x = 10050, y = 10050 where id = 50;
select id, x, y from t6 where id = 50;
id	x	y
50	10050	10050
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
51	51	0
52	52	0
update t6 set x = 10051, y = 10051 where id = 51;
select id, x, y from t6 where id = 51;
id	x	y
51	10051	10051
update t6 set x = 10052, y = 10052 where id = 52;
select id, x, y from t6 where id = 52;
id	x	y
52	10052	10052
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
53	53	0
54	54	0
update t6 set x = 10053, y = 10053 where id = 53;
select id, x, y from t6 where id = 53;
id	x	y
53	10053	10053
update t6 set x = 10054, y = 10054 where id = 54;
select id, x, y from t6 where id = 54;
id	x	y
54	10054	10054
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
55	55	0
56	56	0
update t6 set x = 10055, y = 10055 where id = 55;
select id, x, y from t6 where id = 55;
id	x	y
55	10055	10055
update t6 set x = 10056, y = 10056 where id = 56;
select id, x, y from t6 where id = 56;
id	x	y
56	10056	10056
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
57	57	0
58	58	0
update t6 set x = 10057, y = 10057 where id = 57;
select id, x, y from t6 where id = 57;
id	x	y
57	10057	10057
update t6 set x = 10058, y = 10058 where id = 58;
select id, x, y from t6 where id = 58;
id	x	y
58	10058	10058
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
59	59	0
60	60	0
update t6 set x = 10059, y = 10059 where id = 59;
select id, x, y from t6 where id = 59;
id	x	y
59	10059	10059
update t6 set x = 10060, y = 10060 where id = 60;
select id, x, y from t6 where id = 60;
id	x	y
60	10060	10060
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
61	61	0
62	62	0
update t6 set x = 10061, y = 10061 where id = 61;
select id, x, y from t6 where id = 61;
id	x	y
61	10061	10061
update t6 set x = 10062, y = 10062 where id = 62;
select id, x, y from t6 where id = 62;
id	x	y
62	10062	10062
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
63	63	0
64	64	0
update t6 set x = 10063, y = 10063 where id = 63;
select id, x, y from t6 where id = 63;
id	x	y
63	10063	10063
update t6 set x = 10064, y = 10064 where id = 64;
select id, x, y from t6 where id = 64;
id	x	y
64	10064	10064
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
65	65	0
66	66	0
update t6 set x = 10065, y = 10065 where id = 65;
select id, x, y from t6 where id = 65;
id	x	y
65	10065	10065
update t6 set x = 10066, y = 10066 where id = 66;
select id, x, y from t6 where id = 66;
id	x	y
66	10066	10066
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
67	67	0
68	68	0
update t6 set x = 10067, y = 10067 where id = 67;
select id, x, y from t6 where id = 67;
id	x	y
67	10067	10067
update t6 set x = 10068, y = 10068 where id = 68;
select id, x, y from t6 where id = 68;
id	x	y
68	10068	10068
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
69	69	0
70	70	0
update t6 set x = 10069, y = 10069 where id = 69;
select id, x, y from t6 where id = 69;
id	x	y
69	10069	10069
update t6 set x = 10070, y = 10070 where id = 70;
select id, x, y from t6 where id = 70;
id	x	y
70	10070	10070
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
71	71	0
72	72	0
update t6 set x = 10071, y = 10071 where id = 71;
select id, x, y from t6 where id = 71;
id	x	y
71	10071	10071
update t6 set x = 10072, y = 10072 where id = 72;
select id, x, y from t6 where id = 72;
id	x	y
72	10072	10072
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
73	73	0
74	74	0
update t6 set x = 10073, y = 10073 where id = 73;
select id, x, y from t6 where id = 73;
id	x	y
73	10073	10073
update t6 set x = 10074, y = 10074 where id = 74;
select id, x, y from t6 where id = 74;
id	x	y
74	10074	10074
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
75	75	0
76	76	0
update t6 set x = 10075, y = 10075 where id = 75;
select id, x, y from t6 where id = 75;
id	x	y
75	10075	10075
update t6 set x = 10076, y = 10076 where id = 76;
select id, x, y from t6 where id = 76;
id	x	y
76	10076	10076
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
77	77	0
78	78	0
update t6 set x = 10077, y = 10077 where id = 77;
select id, x, y from t6 where id = 77;
id	x	y
77	10077	10077
update t6 set x = 10078, y = 10078 where id = 78;
select id, x, y from t6 where id = 78;
id	x	y
78	10078	10078
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
79	79	0
80	80	0
update t6 set x = 10079, y = 10079 where id = 79;
select id, x, y from t6 where id = 79;
id	x	y
79	10079	10079
update t6 set x = 10080, y = 10080 where id = 80;
select id, x, y from t6 where id = 80;
id	x	y
80	10080	10080
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
81	81	0
82	82	0
update t6 set x = 10081, y = 10081 where id = 81;
select id, x, y from t6 where id = 81;
id	x	y
81	10081	10081
update t6 set x = 10082, y = 10082 where id = 82;
select id, x, y from t6 where id = 82;
id	x	y
82	10082	10082
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
83	83	0
84	84	0
update t6 set x = 10083, y = 10083 where id = 83;
select id, x, y from t6 where id = 83;
id	x	y
83	10083	10083
update t6 set x = 10084, y = 10084 where id = 84;
select id, x, y from t6 where id = 84;
id	x	y
84	10084	10084
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
85	85	0
86	86	0
update t6 set x = 10085, y = 10085 where id = 85;
select id, x, y from t6 where id = 85;
id	x	y
85	10085	10085
update t6 set x = 10086, y = 10086 where id = 86;
select id, x, y from t6 where id = 86;
id	x	y
86	10086	10086
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
87	87	0
88	88	0
update t6 set x = 10087, y = 10087 where id = 87;
select id, x, y from t6 where id = 87;
id	x	y
87	10087	10087
update t6 set x = 10088, y = 10088 where id = 88;
select id, x, y from t6 where id = 88;
id	x	y
88	10088	10088
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
89	89	0
90	90	0
update t6 set x = 10089, y = 10089 where id = 89;
select id, x, y from t6 where id = 89;
id	x	y
89	10089	10089
update t6 set x = 10090, y = 10090 where id = 90;
select id, x, y from t6 where id = 90;
id	x	y
90	10090	10090
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
91	91	0
92	92	0
update t6 set x = 10091, y = 10091 where id = 91;
select id, x, y from t6 where id = 91;
id	x	y
91	10091	10091
update t6 set x = 10092, y = 10092 where id = 92;
select id, x, y from t6 where id = 92;
id	x	y
92	10092	10092
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
93	93	0
94	94	0
update t6 set x = 10093, y = 10093 where id = 93;
select id, x, y from t6 where id = 93;
id	x	y
93	10093	10093
update t6 set x = 10094, y = 10094 where id = 94;
select id, x, y from t6 where id = 94;
id	x	y
94	10094	10094
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
95	95	0
96	96	0
update t6 set x = 10095, y = 10095 where id = 95;
select id, x, y from t6 where id = 95;
id	x	y
95	10095	10095
update t6 set x = 10096, y = 10096 where id = 96;
select id, x, y from t6 where id = 96;
id	x	y
96	10096	10096
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
97	97	0
98	98	0
update t6 set x = 10097, y = 10097 where id = 97;
select id, x, y from t6 where id = 97;
id	x	y
97	10097	10097
update t6 set x = 10098, y = 10098 where id = 98;
select id, x, y from t6 where id = 98;
id	x	y
98	10098	10098
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
99	99	0
100	100	1
update t6 set x = 10099, y = 10099 where id = 99;
select id, x, y from t6 where id = 99;
id	x	y
99	10099	10099
update t6 set x = 10100, y = 10100 where id = 100;
select id, x, y from t6 where id = 100;
id	x	y
100	10100	10100
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
101	101	1
102	102	1
update t6 set x = 10101, y = 10101 where id = 101;
select id, x, y from t6 where id = 101;
id	x	y
101	10101	10101
update t6 set x = 10102, y = 10102 where id = 102;
select id, x, y from t6 where id = 102;
id	x	y
102	10102	10102
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
103	103	1
104	104	1
update t6 set x = 10103, y = 10103 where id = 103;
select id, x, y from t6 where id = 103;
id	x	y
103	10103	10103
update t6 set x = 10104, y = 10104 where id = 104;
select id, x, y from t6 where id = 104;
id	x	y
104	10104	10104
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
105	105	1
106	106	1
update t6 set x = 10105, y = 10105 where id = 105;
select id, x, y from t6 where id = 105;
id	x	y
105	10105	10105
update t6 set x = 10106, y = 10106 where id = 106;
select id, x, y from t6 where id = 106;
id	x	y
106	10106	10106
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
107	107	1
108	108	1
update t6 set x = 10107, y = 10107 where id = 107;
select id, x, y from t6 where id = 107;
id	x	y
107	10107	10107
update t6 set x = 10108, y = 10108 where id = 108;
select id, x, y from t6 where id = 108;
id	x	y
108	10108	10108
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
109	109	1
110	110	1
update t6 set x = 10109, y = 10109 where id = 109;
select id, x, y from t6 where id = 109;
id	x	y
109	10109	10109
update t6 set x = 10110, y = 10110 where id = 110;
select id, x, y from t6 where id = 110;
id	x	y
110	10110	10110
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
111	111	1
112	112	1
update t6 set x = 10111, y = 10111 where id = 111;
select id, x, y from t6 where id = 111;
id	x	y
111	10111	10111
update t6 set x = 10112, y = 10112 where id = 112;
select id, x, y from t6 where id = 112;
id	x	y
112	10112	10112
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
113	113	1
114	114	1
update t6 set x = 10113, y = 10113 where id = 113;
select id, x, y from t6 where id = 113;
id	x	y
113	10113	10113
update t6 set x = 10114, y = 10114 where id = 114;
select id, x, y from t6 where id = 114;
id	x	y
114	10114	10114
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
115	115	1
116	116	1
update t6 set x = 10115, y = 10115 where id = 115;
select id, x, y from t6 where id = 115;
id	x	y
115	10115	10115
update t6 set x = 10116, y = 10116 where id = 116;
select id, x, y from t6 where id = 116;
id	x	y
116	10116	10116
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
117	117	1
118	118	1
update t6 set x = 10117, y = 10117 where id = 117;
select id, x, y from t6 where id = 117;
id	x	y
117	10117	10117
update t6 set x = 10118, y = 10118 where id = 118;
select id, x, y from t6 where id = 118;
id	x	y
118	10118	10118
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
119	119	1
120	120	1
update t6 set x = 10119, y = 10119 where id = 119;
select id, x, y from t6 where id = 119;
id	x	y
119	10119	10119
update t6 set x = 10120, y = 10120 where id = 120;
select id, x, y from t6 where id = 120;
id	x	y
120	10120	10120
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
121	121	1
122	122	1
update t6 set x = 10121, y = 10121 where id = 121;
select id, x, y from t6 where id = 121;
id	x	y
121	10121	10121
update t6 set x = 10122, y = 10122 where id = 122;
select id, x, y from t6 where id = 122;
id	x	y
122	10122	10122
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
123	123	1
124	124	1
update t6 set x = 10123, y = 10123 where id = 123;
select id, x, y from t6 where id = 123;
id	x	y
123	10123	10123
update t6 set x = 10124, y = 10124 where id = 124;
select id, x, y from t6 where id = 124;
id	x	y
124	10124	10124
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
125	125	1
126	126	1
update t6 set x = 10125, y = 10125 where id = 125;
select id, x, y from t6 where id = 125;
id	x	y
125	10125	10125
update t6 set x = 10126, y = 10126 where id = 126;
select id, x, y from t6 where id = 126;
id	x	y
126	10126	10126
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
127	127	1
128	128	1
update t6 set x = 10127, y = 10127 where id = 127;
select id, x, y from t6 where id = 127;
id	x	y
127	10127	10127
update t6 set x = 10128, y = 10128 where id = 128;
select id, x, y from t6 where id = 128;
id	x	y
128	10128	10128
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
129	129	1
130	130	1
update t6 set x = 10129, y = 10129 where id = 129;
select id, x, y from t6 where id = 129;
id	x	y
129	10129	10129
update t6 set x = 10130, y = 10130 where id = 130;
select id, x, y from t6 where id = 130;
id	x	y
130	10130	10130
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
131	131	1
132	132	1
update t6 set x = 10131, y = 10131 where id = 131;
select id, x, y from t6 where id = 131;
id	x	y
131	10131	10131
update t6 set x = 10132, y = 10132 where id = 132;
select id, x, y from t6 where id = 132;
id	x	y
132	10132	10132
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
133	133	1
134	134	1
update t6 set x = 10133, y = 10133 where id = 133;
select id, x, y from t6 where id = 133;
id	x	y
133	10133	10133
update t6 set x = 10134, y = 10134 where id = 134;
select id, x, y from t6 where id = 134;
id	x	y
134	10134	10134
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
135	135	1
136	136	1
update t6 set x = 10135, y = 10135 where id = 135;
select id, x, y from t6 where id = 135;
id	x	y
135	10135	10135
update t6 set x = 10136, y = 10136 where id = 136;
select id, x, y from t6 where id = 136;
id	x	y
136	10136	10136
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
137	137	1
138	138	1
update t6 set x = 10137, y = 10137 where id = 137;
select id, x, y from t6 where id = 137;
id	x	y
137	10137	10137
update t6 set x = 10138, y = 10138 where id = 138;
select id, x, y from t6 where id = 138;
id	x	y
138	10138	10138
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
139	139	1
140	140	1
update t6 set x = 10139, y = 10139 where id = 139;
select id, x, y from t6 where id = 139;
id	x	y
139	10139	10139
update t6 set x = 10140, y = 10140 where id = 140;
select id, x, y from t6 where id = 140;
id	x	y
140	10140	10140
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
141	141	1
142	142	1
update t6 set x = 10141, y = 10141 where id = 141;
select id, x, y from t6 where id = 141;
id	x	y
141	10141	10141
update t6 set x = 10142, y = 10142 where id = 142;
select id, x, y from t6 where id = 142;
id	x	y
142	10142	10142
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
143	143	1
144	144	1
update t6 set x = 10143, y = 10143 where id = 143;
select id, x, y from t6 where id = 143;
id	x	y
143	10143	10143
update t6 set x = 10144, y = 10144 where id = 144;
select id, x, y from t6 where id = 144;
id	x	y
144	10144	10144
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
145	145	1
146	146	1
update t6 set x = 10145, y = 10145 where id = 145;
select id, x, y from t6 where id = 145;
id	x	y
145	10145	10145
update t6 set x = 10146, y = 10146 where id = 146;
select id, x, y from t6 where id = 146;
id	x	y
146	10146	10146
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
147	147	1
148	148	1
update t6 set x = 10147, y = 10147 where id = 147;
select id, x, y from t6 where id = 147;
id	x	y
147	10147	10147
update t6 set x = 10148, y = 10148 where id = 148;
select id, x, y from t6 where id = 148;
id	x	y
148	10148	10148
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
149	149	1
150	150	1
update t6 set x = 10149, y = 10149 where id = 149;
select id, x, y from t6 where id = 149;
id	x	y
149	10149	10149
update t6 set x = 10150, y = 10150 where id = 150;
select id, x, y from t6 where id = 150;
id	x	y
150	10150	10150
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
151	151	1
152	152	1
update t6 set x = 10151, y = 10151 where id = 151;
select id, x, y from t6 where id = 151;
id	x	y
151	10151	10151
update t6 set x = 10152, y = 10152 where id = 152;
select id, x, y from t6 where id = 152;
id	x	y
152	10152	10152
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
153	153	1
154	154	1
update t6 set x = 10153, y = 10153 where id = 153;
select id, x, y from t6 where id = 153;
id	x	y
153	10153	10153
update t6 set x = 10154, y = 10154 where id = 154;
select id, x, y from t6 where id = 154;
id	x	y
154	10154	10154
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
155	155	1
156	156	1
update t6 set x = 10155, y = 10155 where id = 155;
select id, x, y from t6 where id = 155;
id	x	y
155	10155	10155
update t6 set x = 10156, y = 10156 where id = 156;
select id, x, y from t6 where id = 156;
id	x	y
156	10156	10156
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
157	157	1
158	158	1
update t6 set x = 10157, y = 10157 where id = 157;
select id, x, y from t6 where id = 157;
id	x	y
157	10157	10157
update t6 set x = 10158, y = 10158 where id = 158;
select id, x, y from t6 where id = 158;
id	x	y
158	10158	10158
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
159	159	1
160	160	1
update t6 set x = 10159, y = 10159 where id = 159;
select id, x, y from t6 where id = 159;
id	x	y
159	10159	10159
update t6 set x = 10160, y = 10160 where id = 160;
select id, x, y from t6 where id = 160;
id	x	y
160	10160	10160
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
161	161	1
162	162	1
update t6 set x = 10161, y = 10161 where id = 161;
select id, x, y from t6 where id = 161;
id	x	y
161	10161	10161
update t6 set x = 10162, y = 10162 where id = 162;
select id, x, y from t6 where id = 162;
id	x	y
162	10162	10162
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
163	163	1
164	164	1
update t6 set x = 10163, y = 10163 where id = 163;
select id, x, y from t6 where id = 163;
id	x	y
163	10163	10163
update t6 set x = 10164, y = 10164 where id = 164;
select id, x, y from t6 where id = 164;
id	x	y
164	10164	10164
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
165	165	1
166	166	1
update t6 set x = 10165, y = 10165 where id = 165;
select id, x, y from t6 where id = 165;
id	x	y
165	10165	10165
update t6 set x = 10166, y = 10166 where id = 166;
select id, x, y from t6 where id = 166;
id	x	y
166	10166	10166
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
167	167	1
168	168	1
update t6 set x = 10167, y = 10167 where id = 167;
select id, x, y from t6 where id = 167;
id	x	y
167	10167	10167
update t6 set x = 10168, y = 10168 where id = 168;
select id, x, y from t6 where id = 168;
id	x	y
168	10168	10168
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
169	169	1
170	170	1
update t6 set x = 10169, y = 10169 where id = 169;
select id, x, y from t6 where id = 169;
id	x	y
169	10169	10169
update t6 set x = 10170, y = 10170 where id = 170;
select id, x, y from t6 where id = 170;
id	x	y
170	10170	10170
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
171	171	1
172	172	1
update t6 set x = 10171, y = 10171 where id = 171;
select id, x, y from t6 where id = 171;
id	x	y
171	10171	10171
update t6 set x = 10172, y = 10172 where id = 172;
select id, x, y from t6 where id = 172;
id	x	y
172	10172	10172
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
173	173	1
174	174	1
update t6 set x = 10173, y = 10173 where id = 173;
select id, x, y from t6 where id = 173;
id	x	y
173	10173	10173
update t6 set x = 10174, y = 10174 where id = 174;
select id, x, y from t6 where id = 174;
id	x	y
174	10174	10174
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
175	175	1
176	176	1
update t6 set x = 10175, y = 10175 where id = 175;
select id, x, y from t6 where id = 175;
id	x	y
175	10175	10175
update t6 set x = 10176, y = 10176 where id = 176;
select id, x, y from t6 where id = 176;
id	x	y
176	10176	10176
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
177	177	1
178	178	1
update t6 set x = 10177, y = 10177 where id = 177;
select id, x, y from t6 where id = 177;
id	x	y
177	10177	10177
update t6 set x = 10178, y = 10178 where id = 178;
select id, x, y from t6 where id = 178;
id	x	y
178	10178	10178
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
179	179	1
180	180	1
update t6 set x = 10179, y = 10179 where id = 179;
select id, x, y from t6 where id = 179;
id	x	y
179	10179	10179
update t6 set x = 10180, y = 10180 where id = 180;
select id, x, y from t6 where id = 180;
id	x	y
180	10180	10180
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
181	181	1
182	182	1
update t6 set x = 10181, y = 10181 where id = 181;
select id, x, y from t6 where id = 181;
id	x	y
181	10181	10181
update t6 set x = 10182, y = 10182 where id = 182;
select id, x, y from t6 where id = 182;
id	x	y
182	10182	10182
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
183	183	1
184	184	1
update t6 set x = 10183, y = 10183 where id = 183;
select id, x, y from t6 where id = 183;
id	x	y
183	10183	10183
update t6 set x = 10184, y = 10184 where id = 184;
select id, x, y from t6 where id = 184;
id	x	y
184	10184	10184
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
185	185	1
186	186	1
update t6 set x = 10185, y = 10185 where id = 185;
select id, x, y from t6 where id = 185;
id	x	y
185	10185	10185
update t6 set x = 10186, y = 10186 where id = 186;
select id, x, y from t6 where id = 186;
id	x	y
186	10186	10186
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
187	187	1
188	188	1
update t6 set x = 10187, y = 10187 where id = 187;
select id, x, y from t6 where id = 187;
id	x	y
187	10187	10187
update t6 set x = 10188, y = 10188 where id = 188;
select id, x, y from t6 where id = 188;
id	x	y
188	10188	10188
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
189	189	1
190	190	1
update t6 set x = 10189, y = 10189 where id = 189;
select id, x, y from t6 where id = 189;
id	x	y
189	10189	10189
update t6 set x = 10190, y = 10190 where id = 190;
select id, x, y from t6 where id = 190;
id	x	y
190	10190	10190
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
191	191	1
192	192	1
update t6 set x = 10191, y = 10191 where id = 191;
select id, x, y from t6 where id = 191;
id	x	y
191	10191	10191
update t6 set x = 10192, y = 10192 where id = 192;
select id, x, y from t6 where id = 192;
id	x	y
192	10192	10192
set autocommit=0;
select * from t6 where id > 0 order by id limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
193	193	1
194	194	1
update t6 set x = 10193, y = 10193 where id = 193;
select id, x, y from t6 where id = 193;
id	x	y
193	10193	10193
update t6 set x = 10194, y = 10194 where id = 194;
select id, x, y from t6 where id = 194;
id	x	y
194	10194	10194
set autocommit=0;
select * from t6 where x > 0 order by x limit 2 FOR UPDATE NOWAIT;
ERROR HY000: Failed to lock a record and didn't wait
select * from t6 where x > 0 order by x limit 2 FOR UPDATE SKIP LOCKED;
id	x	y
195	195	1
196	196	1
update t6 set x = 10195, y = 10195 where id = 195;
select id, x, y from t6 where id = 195;
id	x	y
195	10195	10195
update t6 set x = 10196, y = 10196 where id = 196;
select id, x, y from t6 where id = 196;
id	x	y
196	10196	10196
#########################################################################
###
### (8) Job queue 0 : job0
###
#########################################################################
CREATE TABLE `job0` (
`id` int unsigned NOT NULL,
`queue` int unsigned NOT NULL,
`status` int unsigned NOT NULL DEFAULT 0,
`owner` int unsigned DEFAULT NULL,
PRIMARY KEY (`id`),
KEY `queue_status_owner` (`queue`, `status`, `owner`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
select count(*) from job0;
count(*)
10000
set autocommit=0;
Claim the 0-th available job id from queue 0 ==> id = 0
SELECT id, queue, status, owner FROM job0 WHERE id = 0;
id	queue	status	owner
0	0	0	NULL
UPDATE job0 SET status = 1, owner = 0 WHERE id = 0;
SELECT * FROM job0 WHERE id = 0;
id	queue	status	owner
0	0	1	0
set autocommit=0;
Claim the 1-th available job id from queue 0 ==> id = 1
SELECT id, queue, status, owner FROM job0 WHERE id = 1;
id	queue	status	owner
1	0	0	NULL
UPDATE job0 SET status = 1, owner = 0 WHERE id = 1;
SELECT * FROM job0 WHERE id = 1;
id	queue	status	owner
1	0	1	0
set autocommit=0;
Claim the 2-th available job id from queue 0 ==> id = 2
SELECT id, queue, status, owner FROM job0 WHERE id = 2;
id	queue	status	owner
2	0	0	NULL
UPDATE job0 SET status = 1, owner = 0 WHERE id = 2;
SELECT * FROM job0 WHERE id = 2;
id	queue	status	owner
2	0	1	0
set autocommit=0;
Claim the 3-th available job id from queue 0 ==> id = 3
SELECT id, queue, status, owner FROM job0 WHERE id = 3;
id	queue	status	owner
3	0	0	NULL
UPDATE job0 SET status = 1, owner = 0 WHERE id = 3;
SELECT * FROM job0 WHERE id = 3;
id	queue	status	owner
3	0	1	0
set autocommit=0;
Claim the 4-th available job id from queue 0 ==> id = 5
SELECT id, queue, status, owner FROM job0 WHERE id = 5;
id	queue	status	owner
5	0	0	NULL
UPDATE job0 SET status = 1, owner = 0 WHERE id = 5;
SELECT * FROM job0 WHERE id = 5;
id	queue	status	owner
5	0	1	0
set autocommit=0;
Claim the 0-th available job id from queue 1 ==> id = 100
SELECT id, queue, status, owner FROM job0 WHERE id = 100;
id	queue	status	owner
100	1	0	NULL
UPDATE job0 SET status = 1, owner = 1 WHERE id = 100;
SELECT * FROM job0 WHERE id = 100;
id	queue	status	owner
100	1	1	1
set autocommit=0;
Claim the 1-th available job id from queue 1 ==> id = 101
SELECT id, queue, status, owner FROM job0 WHERE id = 101;
id	queue	status	owner
101	1	0	NULL
UPDATE job0 SET status = 1, owner = 1 WHERE id = 101;
SELECT * FROM job0 WHERE id = 101;
id	queue	status	owner
101	1	1	1
set autocommit=0;
Claim the 2-th available job id from queue 1 ==> id = 102
SELECT id, queue, status, owner FROM job0 WHERE id = 102;
id	queue	status	owner
102	1	0	NULL
UPDATE job0 SET status = 1, owner = 1 WHERE id = 102;
SELECT * FROM job0 WHERE id = 102;
id	queue	status	owner
102	1	1	1
set autocommit=0;
Claim the 3-th available job id from queue 1 ==> id = 103
SELECT id, queue, status, owner FROM job0 WHERE id = 103;
id	queue	status	owner
103	1	0	NULL
UPDATE job0 SET status = 1, owner = 1 WHERE id = 103;
SELECT * FROM job0 WHERE id = 103;
id	queue	status	owner
103	1	1	1
set autocommit=0;
Claim the 4-th available job id from queue 1 ==> id = 105
SELECT id, queue, status, owner FROM job0 WHERE id = 105;
id	queue	status	owner
105	1	0	NULL
UPDATE job0 SET status = 1, owner = 1 WHERE id = 105;
SELECT * FROM job0 WHERE id = 105;
id	queue	status	owner
105	1	1	1
set autocommit=0;
Claim the 0-th available job id from queue 2 ==> id = 200
SELECT id, queue, status, owner FROM job0 WHERE id = 200;
id	queue	status	owner
200	2	0	NULL
UPDATE job0 SET status = 1, owner = 2 WHERE id = 200;
SELECT * FROM job0 WHERE id = 200;
id	queue	status	owner
200	2	1	2
set autocommit=0;
Claim the 1-th available job id from queue 2 ==> id = 201
SELECT id, queue, status, owner FROM job0 WHERE id = 201;
id	queue	status	owner
201	2	0	NULL
UPDATE job0 SET status = 1, owner = 2 WHERE id = 201;
SELECT * FROM job0 WHERE id = 201;
id	queue	status	owner
201	2	1	2
set autocommit=0;
Claim the 2-th available job id from queue 2 ==> id = 202
SELECT id, queue, status, owner FROM job0 WHERE id = 202;
id	queue	status	owner
202	2	0	NULL
UPDATE job0 SET status = 1, owner = 2 WHERE id = 202;
SELECT * FROM job0 WHERE id = 202;
id	queue	status	owner
202	2	1	2
set autocommit=0;
Claim the 3-th available job id from queue 2 ==> id = 203
SELECT id, queue, status, owner FROM job0 WHERE id = 203;
id	queue	status	owner
203	2	0	NULL
UPDATE job0 SET status = 1, owner = 2 WHERE id = 203;
SELECT * FROM job0 WHERE id = 203;
id	queue	status	owner
203	2	1	2
set autocommit=0;
Claim the 4-th available job id from queue 2 ==> id = 205
SELECT id, queue, status, owner FROM job0 WHERE id = 205;
id	queue	status	owner
205	2	0	NULL
UPDATE job0 SET status = 1, owner = 2 WHERE id = 205;
SELECT * FROM job0 WHERE id = 205;
id	queue	status	owner
205	2	1	2
set autocommit=0;
Claim the 0-th available job id from queue 3 ==> id = 300
SELECT id, queue, status, owner FROM job0 WHERE id = 300;
id	queue	status	owner
300	3	0	NULL
UPDATE job0 SET status = 1, owner = 3 WHERE id = 300;
SELECT * FROM job0 WHERE id = 300;
id	queue	status	owner
300	3	1	3
set autocommit=0;
Claim the 1-th available job id from queue 3 ==> id = 301
SELECT id, queue, status, owner FROM job0 WHERE id = 301;
id	queue	status	owner
301	3	0	NULL
UPDATE job0 SET status = 1, owner = 3 WHERE id = 301;
SELECT * FROM job0 WHERE id = 301;
id	queue	status	owner
301	3	1	3
set autocommit=0;
Claim the 2-th available job id from queue 3 ==> id = 302
SELECT id, queue, status, owner FROM job0 WHERE id = 302;
id	queue	status	owner
302	3	0	NULL
UPDATE job0 SET status = 1, owner = 3 WHERE id = 302;
SELECT * FROM job0 WHERE id = 302;
id	queue	status	owner
302	3	1	3
set autocommit=0;
Claim the 3-th available job id from queue 3 ==> id = 303
SELECT id, queue, status, owner FROM job0 WHERE id = 303;
id	queue	status	owner
303	3	0	NULL
UPDATE job0 SET status = 1, owner = 3 WHERE id = 303;
SELECT * FROM job0 WHERE id = 303;
id	queue	status	owner
303	3	1	3
set autocommit=0;
Claim the 4-th available job id from queue 3 ==> id = 305
SELECT id, queue, status, owner FROM job0 WHERE id = 305;
id	queue	status	owner
305	3	0	NULL
UPDATE job0 SET status = 1, owner = 3 WHERE id = 305;
SELECT * FROM job0 WHERE id = 305;
id	queue	status	owner
305	3	1	3
set autocommit=0;
Claim the 0-th available job id from queue 4 ==> id = 400
SELECT id, queue, status, owner FROM job0 WHERE id = 400;
id	queue	status	owner
400	4	0	NULL
UPDATE job0 SET status = 1, owner = 4 WHERE id = 400;
SELECT * FROM job0 WHERE id = 400;
id	queue	status	owner
400	4	1	4
set autocommit=0;
Claim the 1-th available job id from queue 4 ==> id = 401
SELECT id, queue, status, owner FROM job0 WHERE id = 401;
id	queue	status	owner
401	4	0	NULL
UPDATE job0 SET status = 1, owner = 4 WHERE id = 401;
SELECT * FROM job0 WHERE id = 401;
id	queue	status	owner
401	4	1	4
set autocommit=0;
Claim the 2-th available job id from queue 4 ==> id = 402
SELECT id, queue, status, owner FROM job0 WHERE id = 402;
id	queue	status	owner
402	4	0	NULL
UPDATE job0 SET status = 1, owner = 4 WHERE id = 402;
SELECT * FROM job0 WHERE id = 402;
id	queue	status	owner
402	4	1	4
set autocommit=0;
Claim the 3-th available job id from queue 4 ==> id = 403
SELECT id, queue, status, owner FROM job0 WHERE id = 403;
id	queue	status	owner
403	4	0	NULL
UPDATE job0 SET status = 1, owner = 4 WHERE id = 403;
SELECT * FROM job0 WHERE id = 403;
id	queue	status	owner
403	4	1	4
set autocommit=0;
Claim the 4-th available job id from queue 4 ==> id = 405
SELECT id, queue, status, owner FROM job0 WHERE id = 405;
id	queue	status	owner
405	4	0	NULL
UPDATE job0 SET status = 1, owner = 4 WHERE id = 405;
SELECT * FROM job0 WHERE id = 405;
id	queue	status	owner
405	4	1	4
set autocommit=0;
Claim the 0-th available job id from queue 5 ==> id = 500
SELECT id, queue, status, owner FROM job0 WHERE id = 500;
id	queue	status	owner
500	5	0	NULL
UPDATE job0 SET status = 1, owner = 5 WHERE id = 500;
SELECT * FROM job0 WHERE id = 500;
id	queue	status	owner
500	5	1	5
set autocommit=0;
Claim the 1-th available job id from queue 5 ==> id = 501
SELECT id, queue, status, owner FROM job0 WHERE id = 501;
id	queue	status	owner
501	5	0	NULL
UPDATE job0 SET status = 1, owner = 5 WHERE id = 501;
SELECT * FROM job0 WHERE id = 501;
id	queue	status	owner
501	5	1	5
set autocommit=0;
Claim the 2-th available job id from queue 5 ==> id = 502
SELECT id, queue, status, owner FROM job0 WHERE id = 502;
id	queue	status	owner
502	5	0	NULL
UPDATE job0 SET status = 1, owner = 5 WHERE id = 502;
SELECT * FROM job0 WHERE id = 502;
id	queue	status	owner
502	5	1	5
set autocommit=0;
Claim the 3-th available job id from queue 5 ==> id = 503
SELECT id, queue, status, owner FROM job0 WHERE id = 503;
id	queue	status	owner
503	5	0	NULL
UPDATE job0 SET status = 1, owner = 5 WHERE id = 503;
SELECT * FROM job0 WHERE id = 503;
id	queue	status	owner
503	5	1	5
set autocommit=0;
Claim the 4-th available job id from queue 5 ==> id = 505
SELECT id, queue, status, owner FROM job0 WHERE id = 505;
id	queue	status	owner
505	5	0	NULL
UPDATE job0 SET status = 1, owner = 5 WHERE id = 505;
SELECT * FROM job0 WHERE id = 505;
id	queue	status	owner
505	5	1	5
set autocommit=0;
Claim the 0-th available job id from queue 6 ==> id = 600
SELECT id, queue, status, owner FROM job0 WHERE id = 600;
id	queue	status	owner
600	6	0	NULL
UPDATE job0 SET status = 1, owner = 6 WHERE id = 600;
SELECT * FROM job0 WHERE id = 600;
id	queue	status	owner
600	6	1	6
set autocommit=0;
Claim the 1-th available job id from queue 6 ==> id = 601
SELECT id, queue, status, owner FROM job0 WHERE id = 601;
id	queue	status	owner
601	6	0	NULL
UPDATE job0 SET status = 1, owner = 6 WHERE id = 601;
SELECT * FROM job0 WHERE id = 601;
id	queue	status	owner
601	6	1	6
set autocommit=0;
Claim the 2-th available job id from queue 6 ==> id = 602
SELECT id, queue, status, owner FROM job0 WHERE id = 602;
id	queue	status	owner
602	6	0	NULL
UPDATE job0 SET status = 1, owner = 6 WHERE id = 602;
SELECT * FROM job0 WHERE id = 602;
id	queue	status	owner
602	6	1	6
set autocommit=0;
Claim the 3-th available job id from queue 6 ==> id = 603
SELECT id, queue, status, owner FROM job0 WHERE id = 603;
id	queue	status	owner
603	6	0	NULL
UPDATE job0 SET status = 1, owner = 6 WHERE id = 603;
SELECT * FROM job0 WHERE id = 603;
id	queue	status	owner
603	6	1	6
set autocommit=0;
Claim the 4-th available job id from queue 6 ==> id = 605
SELECT id, queue, status, owner FROM job0 WHERE id = 605;
id	queue	status	owner
605	6	0	NULL
UPDATE job0 SET status = 1, owner = 6 WHERE id = 605;
SELECT * FROM job0 WHERE id = 605;
id	queue	status	owner
605	6	1	6
set autocommit=0;
Claim the 0-th available job id from queue 7 ==> id = 700
SELECT id, queue, status, owner FROM job0 WHERE id = 700;
id	queue	status	owner
700	7	0	NULL
UPDATE job0 SET status = 1, owner = 7 WHERE id = 700;
SELECT * FROM job0 WHERE id = 700;
id	queue	status	owner
700	7	1	7
set autocommit=0;
Claim the 1-th available job id from queue 7 ==> id = 701
SELECT id, queue, status, owner FROM job0 WHERE id = 701;
id	queue	status	owner
701	7	0	NULL
UPDATE job0 SET status = 1, owner = 7 WHERE id = 701;
SELECT * FROM job0 WHERE id = 701;
id	queue	status	owner
701	7	1	7
set autocommit=0;
Claim the 2-th available job id from queue 7 ==> id = 702
SELECT id, queue, status, owner FROM job0 WHERE id = 702;
id	queue	status	owner
702	7	0	NULL
UPDATE job0 SET status = 1, owner = 7 WHERE id = 702;
SELECT * FROM job0 WHERE id = 702;
id	queue	status	owner
702	7	1	7
set autocommit=0;
Claim the 3-th available job id from queue 7 ==> id = 703
SELECT id, queue, status, owner FROM job0 WHERE id = 703;
id	queue	status	owner
703	7	0	NULL
UPDATE job0 SET status = 1, owner = 7 WHERE id = 703;
SELECT * FROM job0 WHERE id = 703;
id	queue	status	owner
703	7	1	7
set autocommit=0;
Claim the 4-th available job id from queue 7 ==> id = 705
SELECT id, queue, status, owner FROM job0 WHERE id = 705;
id	queue	status	owner
705	7	0	NULL
UPDATE job0 SET status = 1, owner = 7 WHERE id = 705;
SELECT * FROM job0 WHERE id = 705;
id	queue	status	owner
705	7	1	7
set autocommit=0;
Claim the 0-th available job id from queue 8 ==> id = 800
SELECT id, queue, status, owner FROM job0 WHERE id = 800;
id	queue	status	owner
800	8	0	NULL
UPDATE job0 SET status = 1, owner = 8 WHERE id = 800;
SELECT * FROM job0 WHERE id = 800;
id	queue	status	owner
800	8	1	8
set autocommit=0;
Claim the 1-th available job id from queue 8 ==> id = 801
SELECT id, queue, status, owner FROM job0 WHERE id = 801;
id	queue	status	owner
801	8	0	NULL
UPDATE job0 SET status = 1, owner = 8 WHERE id = 801;
SELECT * FROM job0 WHERE id = 801;
id	queue	status	owner
801	8	1	8
set autocommit=0;
Claim the 2-th available job id from queue 8 ==> id = 802
SELECT id, queue, status, owner FROM job0 WHERE id = 802;
id	queue	status	owner
802	8	0	NULL
UPDATE job0 SET status = 1, owner = 8 WHERE id = 802;
SELECT * FROM job0 WHERE id = 802;
id	queue	status	owner
802	8	1	8
set autocommit=0;
Claim the 3-th available job id from queue 8 ==> id = 803
SELECT id, queue, status, owner FROM job0 WHERE id = 803;
id	queue	status	owner
803	8	0	NULL
UPDATE job0 SET status = 1, owner = 8 WHERE id = 803;
SELECT * FROM job0 WHERE id = 803;
id	queue	status	owner
803	8	1	8
set autocommit=0;
Claim the 4-th available job id from queue 8 ==> id = 805
SELECT id, queue, status, owner FROM job0 WHERE id = 805;
id	queue	status	owner
805	8	0	NULL
UPDATE job0 SET status = 1, owner = 8 WHERE id = 805;
SELECT * FROM job0 WHERE id = 805;
id	queue	status	owner
805	8	1	8
set autocommit=0;
Claim the 0-th available job id from queue 9 ==> id = 900
SELECT id, queue, status, owner FROM job0 WHERE id = 900;
id	queue	status	owner
900	9	0	NULL
UPDATE job0 SET status = 1, owner = 9 WHERE id = 900;
SELECT * FROM job0 WHERE id = 900;
id	queue	status	owner
900	9	1	9
set autocommit=0;
Claim the 1-th available job id from queue 9 ==> id = 901
SELECT id, queue, status, owner FROM job0 WHERE id = 901;
id	queue	status	owner
901	9	0	NULL
UPDATE job0 SET status = 1, owner = 9 WHERE id = 901;
SELECT * FROM job0 WHERE id = 901;
id	queue	status	owner
901	9	1	9
set autocommit=0;
Claim the 2-th available job id from queue 9 ==> id = 902
SELECT id, queue, status, owner FROM job0 WHERE id = 902;
id	queue	status	owner
902	9	0	NULL
UPDATE job0 SET status = 1, owner = 9 WHERE id = 902;
SELECT * FROM job0 WHERE id = 902;
id	queue	status	owner
902	9	1	9
set autocommit=0;
Claim the 3-th available job id from queue 9 ==> id = 903
SELECT id, queue, status, owner FROM job0 WHERE id = 903;
id	queue	status	owner
903	9	0	NULL
UPDATE job0 SET status = 1, owner = 9 WHERE id = 903;
SELECT * FROM job0 WHERE id = 903;
id	queue	status	owner
903	9	1	9
set autocommit=0;
Claim the 4-th available job id from queue 9 ==> id = 905
SELECT id, queue, status, owner FROM job0 WHERE id = 905;
id	queue	status	owner
905	9	0	NULL
UPDATE job0 SET status = 1, owner = 9 WHERE id = 905;
SELECT * FROM job0 WHERE id = 905;
id	queue	status	owner
905	9	1	9
set autocommit=0;
Claim the 0-th available job id from queue 10 ==> id = 1000
SELECT id, queue, status, owner FROM job0 WHERE id = 1000;
id	queue	status	owner
1000	10	0	NULL
UPDATE job0 SET status = 1, owner = 10 WHERE id = 1000;
SELECT * FROM job0 WHERE id = 1000;
id	queue	status	owner
1000	10	1	10
set autocommit=0;
Claim the 1-th available job id from queue 10 ==> id = 1001
SELECT id, queue, status, owner FROM job0 WHERE id = 1001;
id	queue	status	owner
1001	10	0	NULL
UPDATE job0 SET status = 1, owner = 10 WHERE id = 1001;
SELECT * FROM job0 WHERE id = 1001;
id	queue	status	owner
1001	10	1	10
set autocommit=0;
Claim the 2-th available job id from queue 10 ==> id = 1002
SELECT id, queue, status, owner FROM job0 WHERE id = 1002;
id	queue	status	owner
1002	10	0	NULL
UPDATE job0 SET status = 1, owner = 10 WHERE id = 1002;
SELECT * FROM job0 WHERE id = 1002;
id	queue	status	owner
1002	10	1	10
set autocommit=0;
Claim the 3-th available job id from queue 10 ==> id = 1003
SELECT id, queue, status, owner FROM job0 WHERE id = 1003;
id	queue	status	owner
1003	10	0	NULL
UPDATE job0 SET status = 1, owner = 10 WHERE id = 1003;
SELECT * FROM job0 WHERE id = 1003;
id	queue	status	owner
1003	10	1	10
set autocommit=0;
Claim the 4-th available job id from queue 10 ==> id = 1005
SELECT id, queue, status, owner FROM job0 WHERE id = 1005;
id	queue	status	owner
1005	10	0	NULL
UPDATE job0 SET status = 1, owner = 10 WHERE id = 1005;
SELECT * FROM job0 WHERE id = 1005;
id	queue	status	owner
1005	10	1	10
set autocommit=0;
Claim the 0-th available job id from queue 11 ==> id = 1100
SELECT id, queue, status, owner FROM job0 WHERE id = 1100;
id	queue	status	owner
1100	11	0	NULL
UPDATE job0 SET status = 1, owner = 11 WHERE id = 1100;
SELECT * FROM job0 WHERE id = 1100;
id	queue	status	owner
1100	11	1	11
set autocommit=0;
Claim the 1-th available job id from queue 11 ==> id = 1101
SELECT id, queue, status, owner FROM job0 WHERE id = 1101;
id	queue	status	owner
1101	11	0	NULL
UPDATE job0 SET status = 1, owner = 11 WHERE id = 1101;
SELECT * FROM job0 WHERE id = 1101;
id	queue	status	owner
1101	11	1	11
set autocommit=0;
Claim the 2-th available job id from queue 11 ==> id = 1102
SELECT id, queue, status, owner FROM job0 WHERE id = 1102;
id	queue	status	owner
1102	11	0	NULL
UPDATE job0 SET status = 1, owner = 11 WHERE id = 1102;
SELECT * FROM job0 WHERE id = 1102;
id	queue	status	owner
1102	11	1	11
set autocommit=0;
Claim the 3-th available job id from queue 11 ==> id = 1103
SELECT id, queue, status, owner FROM job0 WHERE id = 1103;
id	queue	status	owner
1103	11	0	NULL
UPDATE job0 SET status = 1, owner = 11 WHERE id = 1103;
SELECT * FROM job0 WHERE id = 1103;
id	queue	status	owner
1103	11	1	11
set autocommit=0;
Claim the 4-th available job id from queue 11 ==> id = 1105
SELECT id, queue, status, owner FROM job0 WHERE id = 1105;
id	queue	status	owner
1105	11	0	NULL
UPDATE job0 SET status = 1, owner = 11 WHERE id = 1105;
SELECT * FROM job0 WHERE id = 1105;
id	queue	status	owner
1105	11	1	11
set autocommit=0;
Claim the 0-th available job id from queue 12 ==> id = 1200
SELECT id, queue, status, owner FROM job0 WHERE id = 1200;
id	queue	status	owner
1200	12	0	NULL
UPDATE job0 SET status = 1, owner = 12 WHERE id = 1200;
SELECT * FROM job0 WHERE id = 1200;
id	queue	status	owner
1200	12	1	12
set autocommit=0;
Claim the 1-th available job id from queue 12 ==> id = 1201
SELECT id, queue, status, owner FROM job0 WHERE id = 1201;
id	queue	status	owner
1201	12	0	NULL
UPDATE job0 SET status = 1, owner = 12 WHERE id = 1201;
SELECT * FROM job0 WHERE id = 1201;
id	queue	status	owner
1201	12	1	12
set autocommit=0;
Claim the 2-th available job id from queue 12 ==> id = 1202
SELECT id, queue, status, owner FROM job0 WHERE id = 1202;
id	queue	status	owner
1202	12	0	NULL
UPDATE job0 SET status = 1, owner = 12 WHERE id = 1202;
SELECT * FROM job0 WHERE id = 1202;
id	queue	status	owner
1202	12	1	12
set autocommit=0;
Claim the 3-th available job id from queue 12 ==> id = 1203
SELECT id, queue, status, owner FROM job0 WHERE id = 1203;
id	queue	status	owner
1203	12	0	NULL
UPDATE job0 SET status = 1, owner = 12 WHERE id = 1203;
SELECT * FROM job0 WHERE id = 1203;
id	queue	status	owner
1203	12	1	12
set autocommit=0;
Claim the 4-th available job id from queue 12 ==> id = 1205
SELECT id, queue, status, owner FROM job0 WHERE id = 1205;
id	queue	status	owner
1205	12	0	NULL
UPDATE job0 SET status = 1, owner = 12 WHERE id = 1205;
SELECT * FROM job0 WHERE id = 1205;
id	queue	status	owner
1205	12	1	12
set autocommit=0;
Claim the 0-th available job id from queue 13 ==> id = 1300
SELECT id, queue, status, owner FROM job0 WHERE id = 1300;
id	queue	status	owner
1300	13	0	NULL
UPDATE job0 SET status = 1, owner = 13 WHERE id = 1300;
SELECT * FROM job0 WHERE id = 1300;
id	queue	status	owner
1300	13	1	13
set autocommit=0;
Claim the 1-th available job id from queue 13 ==> id = 1301
SELECT id, queue, status, owner FROM job0 WHERE id = 1301;
id	queue	status	owner
1301	13	0	NULL
UPDATE job0 SET status = 1, owner = 13 WHERE id = 1301;
SELECT * FROM job0 WHERE id = 1301;
id	queue	status	owner
1301	13	1	13
set autocommit=0;
Claim the 2-th available job id from queue 13 ==> id = 1302
SELECT id, queue, status, owner FROM job0 WHERE id = 1302;
id	queue	status	owner
1302	13	0	NULL
UPDATE job0 SET status = 1, owner = 13 WHERE id = 1302;
SELECT * FROM job0 WHERE id = 1302;
id	queue	status	owner
1302	13	1	13
set autocommit=0;
Claim the 3-th available job id from queue 13 ==> id = 1303
SELECT id, queue, status, owner FROM job0 WHERE id = 1303;
id	queue	status	owner
1303	13	0	NULL
UPDATE job0 SET status = 1, owner = 13 WHERE id = 1303;
SELECT * FROM job0 WHERE id = 1303;
id	queue	status	owner
1303	13	1	13
set autocommit=0;
Claim the 4-th available job id from queue 13 ==> id = 1305
SELECT id, queue, status, owner FROM job0 WHERE id = 1305;
id	queue	status	owner
1305	13	0	NULL
UPDATE job0 SET status = 1, owner = 13 WHERE id = 1305;
SELECT * FROM job0 WHERE id = 1305;
id	queue	status	owner
1305	13	1	13
set autocommit=0;
Claim the 0-th available job id from queue 14 ==> id = 1400
SELECT id, queue, status, owner FROM job0 WHERE id = 1400;
id	queue	status	owner
1400	14	0	NULL
UPDATE job0 SET status = 1, owner = 14 WHERE id = 1400;
SELECT * FROM job0 WHERE id = 1400;
id	queue	status	owner
1400	14	1	14
set autocommit=0;
Claim the 1-th available job id from queue 14 ==> id = 1401
SELECT id, queue, status, owner FROM job0 WHERE id = 1401;
id	queue	status	owner
1401	14	0	NULL
UPDATE job0 SET status = 1, owner = 14 WHERE id = 1401;
SELECT * FROM job0 WHERE id = 1401;
id	queue	status	owner
1401	14	1	14
set autocommit=0;
Claim the 2-th available job id from queue 14 ==> id = 1402
SELECT id, queue, status, owner FROM job0 WHERE id = 1402;
id	queue	status	owner
1402	14	0	NULL
UPDATE job0 SET status = 1, owner = 14 WHERE id = 1402;
SELECT * FROM job0 WHERE id = 1402;
id	queue	status	owner
1402	14	1	14
set autocommit=0;
Claim the 3-th available job id from queue 14 ==> id = 1403
SELECT id, queue, status, owner FROM job0 WHERE id = 1403;
id	queue	status	owner
1403	14	0	NULL
UPDATE job0 SET status = 1, owner = 14 WHERE id = 1403;
SELECT * FROM job0 WHERE id = 1403;
id	queue	status	owner
1403	14	1	14
set autocommit=0;
Claim the 4-th available job id from queue 14 ==> id = 1405
SELECT id, queue, status, owner FROM job0 WHERE id = 1405;
id	queue	status	owner
1405	14	0	NULL
UPDATE job0 SET status = 1, owner = 14 WHERE id = 1405;
SELECT * FROM job0 WHERE id = 1405;
id	queue	status	owner
1405	14	1	14
set autocommit=0;
Claim the 0-th available job id from queue 15 ==> id = 1500
SELECT id, queue, status, owner FROM job0 WHERE id = 1500;
id	queue	status	owner
1500	15	0	NULL
UPDATE job0 SET status = 1, owner = 15 WHERE id = 1500;
SELECT * FROM job0 WHERE id = 1500;
id	queue	status	owner
1500	15	1	15
set autocommit=0;
Claim the 1-th available job id from queue 15 ==> id = 1501
SELECT id, queue, status, owner FROM job0 WHERE id = 1501;
id	queue	status	owner
1501	15	0	NULL
UPDATE job0 SET status = 1, owner = 15 WHERE id = 1501;
SELECT * FROM job0 WHERE id = 1501;
id	queue	status	owner
1501	15	1	15
set autocommit=0;
Claim the 2-th available job id from queue 15 ==> id = 1502
SELECT id, queue, status, owner FROM job0 WHERE id = 1502;
id	queue	status	owner
1502	15	0	NULL
UPDATE job0 SET status = 1, owner = 15 WHERE id = 1502;
SELECT * FROM job0 WHERE id = 1502;
id	queue	status	owner
1502	15	1	15
set autocommit=0;
Claim the 3-th available job id from queue 15 ==> id = 1503
SELECT id, queue, status, owner FROM job0 WHERE id = 1503;
id	queue	status	owner
1503	15	0	NULL
UPDATE job0 SET status = 1, owner = 15 WHERE id = 1503;
SELECT * FROM job0 WHERE id = 1503;
id	queue	status	owner
1503	15	1	15
set autocommit=0;
Claim the 4-th available job id from queue 15 ==> id = 1505
SELECT id, queue, status, owner FROM job0 WHERE id = 1505;
id	queue	status	owner
1505	15	0	NULL
UPDATE job0 SET status = 1, owner = 15 WHERE id = 1505;
SELECT * FROM job0 WHERE id = 1505;
id	queue	status	owner
1505	15	1	15
set autocommit=0;
Claim the 0-th available job id from queue 16 ==> id = 1600
SELECT id, queue, status, owner FROM job0 WHERE id = 1600;
id	queue	status	owner
1600	16	0	NULL
UPDATE job0 SET status = 1, owner = 16 WHERE id = 1600;
SELECT * FROM job0 WHERE id = 1600;
id	queue	status	owner
1600	16	1	16
set autocommit=0;
Claim the 1-th available job id from queue 16 ==> id = 1601
SELECT id, queue, status, owner FROM job0 WHERE id = 1601;
id	queue	status	owner
1601	16	0	NULL
UPDATE job0 SET status = 1, owner = 16 WHERE id = 1601;
SELECT * FROM job0 WHERE id = 1601;
id	queue	status	owner
1601	16	1	16
set autocommit=0;
Claim the 2-th available job id from queue 16 ==> id = 1602
SELECT id, queue, status, owner FROM job0 WHERE id = 1602;
id	queue	status	owner
1602	16	0	NULL
UPDATE job0 SET status = 1, owner = 16 WHERE id = 1602;
SELECT * FROM job0 WHERE id = 1602;
id	queue	status	owner
1602	16	1	16
set autocommit=0;
Claim the 3-th available job id from queue 16 ==> id = 1603
SELECT id, queue, status, owner FROM job0 WHERE id = 1603;
id	queue	status	owner
1603	16	0	NULL
UPDATE job0 SET status = 1, owner = 16 WHERE id = 1603;
SELECT * FROM job0 WHERE id = 1603;
id	queue	status	owner
1603	16	1	16
set autocommit=0;
Claim the 4-th available job id from queue 16 ==> id = 1605
SELECT id, queue, status, owner FROM job0 WHERE id = 1605;
id	queue	status	owner
1605	16	0	NULL
UPDATE job0 SET status = 1, owner = 16 WHERE id = 1605;
SELECT * FROM job0 WHERE id = 1605;
id	queue	status	owner
1605	16	1	16
set autocommit=0;
Claim the 0-th available job id from queue 17 ==> id = 1700
SELECT id, queue, status, owner FROM job0 WHERE id = 1700;
id	queue	status	owner
1700	17	0	NULL
UPDATE job0 SET status = 1, owner = 17 WHERE id = 1700;
SELECT * FROM job0 WHERE id = 1700;
id	queue	status	owner
1700	17	1	17
set autocommit=0;
Claim the 1-th available job id from queue 17 ==> id = 1701
SELECT id, queue, status, owner FROM job0 WHERE id = 1701;
id	queue	status	owner
1701	17	0	NULL
UPDATE job0 SET status = 1, owner = 17 WHERE id = 1701;
SELECT * FROM job0 WHERE id = 1701;
id	queue	status	owner
1701	17	1	17
set autocommit=0;
Claim the 2-th available job id from queue 17 ==> id = 1702
SELECT id, queue, status, owner FROM job0 WHERE id = 1702;
id	queue	status	owner
1702	17	0	NULL
UPDATE job0 SET status = 1, owner = 17 WHERE id = 1702;
SELECT * FROM job0 WHERE id = 1702;
id	queue	status	owner
1702	17	1	17
set autocommit=0;
Claim the 3-th available job id from queue 17 ==> id = 1703
SELECT id, queue, status, owner FROM job0 WHERE id = 1703;
id	queue	status	owner
1703	17	0	NULL
UPDATE job0 SET status = 1, owner = 17 WHERE id = 1703;
SELECT * FROM job0 WHERE id = 1703;
id	queue	status	owner
1703	17	1	17
set autocommit=0;
Claim the 4-th available job id from queue 17 ==> id = 1705
SELECT id, queue, status, owner FROM job0 WHERE id = 1705;
id	queue	status	owner
1705	17	0	NULL
UPDATE job0 SET status = 1, owner = 17 WHERE id = 1705;
SELECT * FROM job0 WHERE id = 1705;
id	queue	status	owner
1705	17	1	17
set autocommit=0;
Claim the 0-th available job id from queue 18 ==> id = 1800
SELECT id, queue, status, owner FROM job0 WHERE id = 1800;
id	queue	status	owner
1800	18	0	NULL
UPDATE job0 SET status = 1, owner = 18 WHERE id = 1800;
SELECT * FROM job0 WHERE id = 1800;
id	queue	status	owner
1800	18	1	18
set autocommit=0;
Claim the 1-th available job id from queue 18 ==> id = 1801
SELECT id, queue, status, owner FROM job0 WHERE id = 1801;
id	queue	status	owner
1801	18	0	NULL
UPDATE job0 SET status = 1, owner = 18 WHERE id = 1801;
SELECT * FROM job0 WHERE id = 1801;
id	queue	status	owner
1801	18	1	18
set autocommit=0;
Claim the 2-th available job id from queue 18 ==> id = 1802
SELECT id, queue, status, owner FROM job0 WHERE id = 1802;
id	queue	status	owner
1802	18	0	NULL
UPDATE job0 SET status = 1, owner = 18 WHERE id = 1802;
SELECT * FROM job0 WHERE id = 1802;
id	queue	status	owner
1802	18	1	18
set autocommit=0;
Claim the 3-th available job id from queue 18 ==> id = 1803
SELECT id, queue, status, owner FROM job0 WHERE id = 1803;
id	queue	status	owner
1803	18	0	NULL
UPDATE job0 SET status = 1, owner = 18 WHERE id = 1803;
SELECT * FROM job0 WHERE id = 1803;
id	queue	status	owner
1803	18	1	18
set autocommit=0;
Claim the 4-th available job id from queue 18 ==> id = 1805
SELECT id, queue, status, owner FROM job0 WHERE id = 1805;
id	queue	status	owner
1805	18	0	NULL
UPDATE job0 SET status = 1, owner = 18 WHERE id = 1805;
SELECT * FROM job0 WHERE id = 1805;
id	queue	status	owner
1805	18	1	18
set autocommit=0;
Claim the 0-th available job id from queue 19 ==> id = 1900
SELECT id, queue, status, owner FROM job0 WHERE id = 1900;
id	queue	status	owner
1900	19	0	NULL
UPDATE job0 SET status = 1, owner = 19 WHERE id = 1900;
SELECT * FROM job0 WHERE id = 1900;
id	queue	status	owner
1900	19	1	19
set autocommit=0;
Claim the 1-th available job id from queue 19 ==> id = 1901
SELECT id, queue, status, owner FROM job0 WHERE id = 1901;
id	queue	status	owner
1901	19	0	NULL
UPDATE job0 SET status = 1, owner = 19 WHERE id = 1901;
SELECT * FROM job0 WHERE id = 1901;
id	queue	status	owner
1901	19	1	19
set autocommit=0;
Claim the 2-th available job id from queue 19 ==> id = 1902
SELECT id, queue, status, owner FROM job0 WHERE id = 1902;
id	queue	status	owner
1902	19	0	NULL
UPDATE job0 SET status = 1, owner = 19 WHERE id = 1902;
SELECT * FROM job0 WHERE id = 1902;
id	queue	status	owner
1902	19	1	19
set autocommit=0;
Claim the 3-th available job id from queue 19 ==> id = 1903
SELECT id, queue, status, owner FROM job0 WHERE id = 1903;
id	queue	status	owner
1903	19	0	NULL
UPDATE job0 SET status = 1, owner = 19 WHERE id = 1903;
SELECT * FROM job0 WHERE id = 1903;
id	queue	status	owner
1903	19	1	19
set autocommit=0;
Claim the 4-th available job id from queue 19 ==> id = 1905
SELECT id, queue, status, owner FROM job0 WHERE id = 1905;
id	queue	status	owner
1905	19	0	NULL
UPDATE job0 SET status = 1, owner = 19 WHERE id = 1905;
SELECT * FROM job0 WHERE id = 1905;
id	queue	status	owner
1905	19	1	19
drop table job0;
#########################################################################
###
### (9) Job queue 1 : job1
###
#########################################################################
CREATE TABLE `job1` (
`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
`job_id` bigint(20) unsigned NOT NULL,
`stage` tinyint(4) NOT NULL,
`status` tinyint(4) NOT NULL DEFAULT '0',
`lock_owner` varchar(127) NOT NULL,
`lock_time` bigint(20) NOT NULL,
`lock_expire` bigint(20) NOT NULL,
`location` varchar(255) DEFAULT NULL,
PRIMARY KEY (`id`),
UNIQUE KEY `id_stage` (`job_id`,`stage`),
KEY `claim` (`stage`,`status`,`lock_time`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000002;
id	lock_time	lock_expire	lock_owner
1000002	2	2	
UPDATE job1 SET lock_time = 1000002, lock_expire = 1000002 WHERE id = 1000002;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000002;
id	lock_time	lock_expire	lock_owner
1000002	1000002	1000002	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000003;
id	lock_time	lock_expire	lock_owner
1000003	3	3	
UPDATE job1 SET lock_time = 1000003, lock_expire = 1000003 WHERE id = 1000003;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000003;
id	lock_time	lock_expire	lock_owner
1000003	1000003	1000003	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000004;
id	lock_time	lock_expire	lock_owner
1000004	4	4	
UPDATE job1 SET lock_time = 1000004, lock_expire = 1000004 WHERE id = 1000004;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000004;
id	lock_time	lock_expire	lock_owner
1000004	1000004	1000004	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000005;
id	lock_time	lock_expire	lock_owner
1000005	5	5	
UPDATE job1 SET lock_time = 1000005, lock_expire = 1000005 WHERE id = 1000005;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000005;
id	lock_time	lock_expire	lock_owner
1000005	1000005	1000005	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000007;
id	lock_time	lock_expire	lock_owner
1000007	7	7	
UPDATE job1 SET lock_time = 1000007, lock_expire = 1000007 WHERE id = 1000007;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000007;
id	lock_time	lock_expire	lock_owner
1000007	1000007	1000007	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000008;
id	lock_time	lock_expire	lock_owner
1000008	8	8	
UPDATE job1 SET lock_time = 1000008, lock_expire = 1000008 WHERE id = 1000008;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000008;
id	lock_time	lock_expire	lock_owner
1000008	1000008	1000008	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000009;
id	lock_time	lock_expire	lock_owner
1000009	9	9	
UPDATE job1 SET lock_time = 1000009, lock_expire = 1000009 WHERE id = 1000009;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000009;
id	lock_time	lock_expire	lock_owner
1000009	1000009	1000009	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000010;
id	lock_time	lock_expire	lock_owner
1000010	10	10	
UPDATE job1 SET lock_time = 1000010, lock_expire = 1000010 WHERE id = 1000010;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000010;
id	lock_time	lock_expire	lock_owner
1000010	1000010	1000010	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000012;
id	lock_time	lock_expire	lock_owner
1000012	12	12	
UPDATE job1 SET lock_time = 1000012, lock_expire = 1000012 WHERE id = 1000012;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000012;
id	lock_time	lock_expire	lock_owner
1000012	1000012	1000012	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000013;
id	lock_time	lock_expire	lock_owner
1000013	13	13	
UPDATE job1 SET lock_time = 1000013, lock_expire = 1000013 WHERE id = 1000013;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000013;
id	lock_time	lock_expire	lock_owner
1000013	1000013	1000013	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000014;
id	lock_time	lock_expire	lock_owner
1000014	14	14	
UPDATE job1 SET lock_time = 1000014, lock_expire = 1000014 WHERE id = 1000014;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000014;
id	lock_time	lock_expire	lock_owner
1000014	1000014	1000014	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000015;
id	lock_time	lock_expire	lock_owner
1000015	15	15	
UPDATE job1 SET lock_time = 1000015, lock_expire = 1000015 WHERE id = 1000015;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000015;
id	lock_time	lock_expire	lock_owner
1000015	1000015	1000015	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000017;
id	lock_time	lock_expire	lock_owner
1000017	17	17	
UPDATE job1 SET lock_time = 1000017, lock_expire = 1000017 WHERE id = 1000017;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000017;
id	lock_time	lock_expire	lock_owner
1000017	1000017	1000017	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000018;
id	lock_time	lock_expire	lock_owner
1000018	18	18	
UPDATE job1 SET lock_time = 1000018, lock_expire = 1000018 WHERE id = 1000018;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000018;
id	lock_time	lock_expire	lock_owner
1000018	1000018	1000018	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000019;
id	lock_time	lock_expire	lock_owner
1000019	19	19	
UPDATE job1 SET lock_time = 1000019, lock_expire = 1000019 WHERE id = 1000019;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000019;
id	lock_time	lock_expire	lock_owner
1000019	1000019	1000019	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000020;
id	lock_time	lock_expire	lock_owner
1000020	20	20	
UPDATE job1 SET lock_time = 1000020, lock_expire = 1000020 WHERE id = 1000020;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000020;
id	lock_time	lock_expire	lock_owner
1000020	1000020	1000020	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000022;
id	lock_time	lock_expire	lock_owner
1000022	22	22	
UPDATE job1 SET lock_time = 1000022, lock_expire = 1000022 WHERE id = 1000022;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000022;
id	lock_time	lock_expire	lock_owner
1000022	1000022	1000022	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000023;
id	lock_time	lock_expire	lock_owner
1000023	23	23	
UPDATE job1 SET lock_time = 1000023, lock_expire = 1000023 WHERE id = 1000023;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000023;
id	lock_time	lock_expire	lock_owner
1000023	1000023	1000023	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000024;
id	lock_time	lock_expire	lock_owner
1000024	24	24	
UPDATE job1 SET lock_time = 1000024, lock_expire = 1000024 WHERE id = 1000024;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000024;
id	lock_time	lock_expire	lock_owner
1000024	1000024	1000024	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000025;
id	lock_time	lock_expire	lock_owner
1000025	25	25	
UPDATE job1 SET lock_time = 1000025, lock_expire = 1000025 WHERE id = 1000025;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000025;
id	lock_time	lock_expire	lock_owner
1000025	1000025	1000025	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000027;
id	lock_time	lock_expire	lock_owner
1000027	27	27	
UPDATE job1 SET lock_time = 1000027, lock_expire = 1000027 WHERE id = 1000027;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000027;
id	lock_time	lock_expire	lock_owner
1000027	1000027	1000027	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000028;
id	lock_time	lock_expire	lock_owner
1000028	28	28	
UPDATE job1 SET lock_time = 1000028, lock_expire = 1000028 WHERE id = 1000028;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000028;
id	lock_time	lock_expire	lock_owner
1000028	1000028	1000028	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000029;
id	lock_time	lock_expire	lock_owner
1000029	29	29	
UPDATE job1 SET lock_time = 1000029, lock_expire = 1000029 WHERE id = 1000029;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000029;
id	lock_time	lock_expire	lock_owner
1000029	1000029	1000029	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000030;
id	lock_time	lock_expire	lock_owner
1000030	30	30	
UPDATE job1 SET lock_time = 1000030, lock_expire = 1000030 WHERE id = 1000030;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000030;
id	lock_time	lock_expire	lock_owner
1000030	1000030	1000030	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000032;
id	lock_time	lock_expire	lock_owner
1000032	32	32	
UPDATE job1 SET lock_time = 1000032, lock_expire = 1000032 WHERE id = 1000032;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000032;
id	lock_time	lock_expire	lock_owner
1000032	1000032	1000032	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000033;
id	lock_time	lock_expire	lock_owner
1000033	33	33	
UPDATE job1 SET lock_time = 1000033, lock_expire = 1000033 WHERE id = 1000033;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000033;
id	lock_time	lock_expire	lock_owner
1000033	1000033	1000033	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000034;
id	lock_time	lock_expire	lock_owner
1000034	34	34	
UPDATE job1 SET lock_time = 1000034, lock_expire = 1000034 WHERE id = 1000034;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000034;
id	lock_time	lock_expire	lock_owner
1000034	1000034	1000034	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000035;
id	lock_time	lock_expire	lock_owner
1000035	35	35	
UPDATE job1 SET lock_time = 1000035, lock_expire = 1000035 WHERE id = 1000035;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000035;
id	lock_time	lock_expire	lock_owner
1000035	1000035	1000035	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000037;
id	lock_time	lock_expire	lock_owner
1000037	37	37	
UPDATE job1 SET lock_time = 1000037, lock_expire = 1000037 WHERE id = 1000037;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000037;
id	lock_time	lock_expire	lock_owner
1000037	1000037	1000037	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000038;
id	lock_time	lock_expire	lock_owner
1000038	38	38	
UPDATE job1 SET lock_time = 1000038, lock_expire = 1000038 WHERE id = 1000038;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000038;
id	lock_time	lock_expire	lock_owner
1000038	1000038	1000038	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000039;
id	lock_time	lock_expire	lock_owner
1000039	39	39	
UPDATE job1 SET lock_time = 1000039, lock_expire = 1000039 WHERE id = 1000039;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000039;
id	lock_time	lock_expire	lock_owner
1000039	1000039	1000039	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000040;
id	lock_time	lock_expire	lock_owner
1000040	40	40	
UPDATE job1 SET lock_time = 1000040, lock_expire = 1000040 WHERE id = 1000040;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000040;
id	lock_time	lock_expire	lock_owner
1000040	1000040	1000040	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000042;
id	lock_time	lock_expire	lock_owner
1000042	42	42	
UPDATE job1 SET lock_time = 1000042, lock_expire = 1000042 WHERE id = 1000042;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000042;
id	lock_time	lock_expire	lock_owner
1000042	1000042	1000042	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000043;
id	lock_time	lock_expire	lock_owner
1000043	43	43	
UPDATE job1 SET lock_time = 1000043, lock_expire = 1000043 WHERE id = 1000043;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000043;
id	lock_time	lock_expire	lock_owner
1000043	1000043	1000043	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000044;
id	lock_time	lock_expire	lock_owner
1000044	44	44	
UPDATE job1 SET lock_time = 1000044, lock_expire = 1000044 WHERE id = 1000044;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000044;
id	lock_time	lock_expire	lock_owner
1000044	1000044	1000044	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000045;
id	lock_time	lock_expire	lock_owner
1000045	45	45	
UPDATE job1 SET lock_time = 1000045, lock_expire = 1000045 WHERE id = 1000045;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000045;
id	lock_time	lock_expire	lock_owner
1000045	1000045	1000045	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000047;
id	lock_time	lock_expire	lock_owner
1000047	47	47	
UPDATE job1 SET lock_time = 1000047, lock_expire = 1000047 WHERE id = 1000047;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000047;
id	lock_time	lock_expire	lock_owner
1000047	1000047	1000047	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000048;
id	lock_time	lock_expire	lock_owner
1000048	48	48	
UPDATE job1 SET lock_time = 1000048, lock_expire = 1000048 WHERE id = 1000048;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000048;
id	lock_time	lock_expire	lock_owner
1000048	1000048	1000048	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000049;
id	lock_time	lock_expire	lock_owner
1000049	49	49	
UPDATE job1 SET lock_time = 1000049, lock_expire = 1000049 WHERE id = 1000049;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000049;
id	lock_time	lock_expire	lock_owner
1000049	1000049	1000049	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000050;
id	lock_time	lock_expire	lock_owner
1000050	50	50	
UPDATE job1 SET lock_time = 1000050, lock_expire = 1000050 WHERE id = 1000050;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000050;
id	lock_time	lock_expire	lock_owner
1000050	1000050	1000050	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000052;
id	lock_time	lock_expire	lock_owner
1000052	52	52	
UPDATE job1 SET lock_time = 1000052, lock_expire = 1000052 WHERE id = 1000052;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000052;
id	lock_time	lock_expire	lock_owner
1000052	1000052	1000052	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000053;
id	lock_time	lock_expire	lock_owner
1000053	53	53	
UPDATE job1 SET lock_time = 1000053, lock_expire = 1000053 WHERE id = 1000053;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000053;
id	lock_time	lock_expire	lock_owner
1000053	1000053	1000053	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000054;
id	lock_time	lock_expire	lock_owner
1000054	54	54	
UPDATE job1 SET lock_time = 1000054, lock_expire = 1000054 WHERE id = 1000054;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000054;
id	lock_time	lock_expire	lock_owner
1000054	1000054	1000054	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000055;
id	lock_time	lock_expire	lock_owner
1000055	55	55	
UPDATE job1 SET lock_time = 1000055, lock_expire = 1000055 WHERE id = 1000055;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000055;
id	lock_time	lock_expire	lock_owner
1000055	1000055	1000055	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000057;
id	lock_time	lock_expire	lock_owner
1000057	57	57	
UPDATE job1 SET lock_time = 1000057, lock_expire = 1000057 WHERE id = 1000057;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000057;
id	lock_time	lock_expire	lock_owner
1000057	1000057	1000057	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000058;
id	lock_time	lock_expire	lock_owner
1000058	58	58	
UPDATE job1 SET lock_time = 1000058, lock_expire = 1000058 WHERE id = 1000058;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000058;
id	lock_time	lock_expire	lock_owner
1000058	1000058	1000058	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000059;
id	lock_time	lock_expire	lock_owner
1000059	59	59	
UPDATE job1 SET lock_time = 1000059, lock_expire = 1000059 WHERE id = 1000059;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000059;
id	lock_time	lock_expire	lock_owner
1000059	1000059	1000059	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000060;
id	lock_time	lock_expire	lock_owner
1000060	60	60	
UPDATE job1 SET lock_time = 1000060, lock_expire = 1000060 WHERE id = 1000060;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000060;
id	lock_time	lock_expire	lock_owner
1000060	1000060	1000060	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000062;
id	lock_time	lock_expire	lock_owner
1000062	62	62	
UPDATE job1 SET lock_time = 1000062, lock_expire = 1000062 WHERE id = 1000062;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000062;
id	lock_time	lock_expire	lock_owner
1000062	1000062	1000062	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000063;
id	lock_time	lock_expire	lock_owner
1000063	63	63	
UPDATE job1 SET lock_time = 1000063, lock_expire = 1000063 WHERE id = 1000063;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000063;
id	lock_time	lock_expire	lock_owner
1000063	1000063	1000063	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000064;
id	lock_time	lock_expire	lock_owner
1000064	64	64	
UPDATE job1 SET lock_time = 1000064, lock_expire = 1000064 WHERE id = 1000064;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000064;
id	lock_time	lock_expire	lock_owner
1000064	1000064	1000064	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000065;
id	lock_time	lock_expire	lock_owner
1000065	65	65	
UPDATE job1 SET lock_time = 1000065, lock_expire = 1000065 WHERE id = 1000065;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000065;
id	lock_time	lock_expire	lock_owner
1000065	1000065	1000065	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000067;
id	lock_time	lock_expire	lock_owner
1000067	67	67	
UPDATE job1 SET lock_time = 1000067, lock_expire = 1000067 WHERE id = 1000067;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000067;
id	lock_time	lock_expire	lock_owner
1000067	1000067	1000067	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000068;
id	lock_time	lock_expire	lock_owner
1000068	68	68	
UPDATE job1 SET lock_time = 1000068, lock_expire = 1000068 WHERE id = 1000068;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000068;
id	lock_time	lock_expire	lock_owner
1000068	1000068	1000068	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000069;
id	lock_time	lock_expire	lock_owner
1000069	69	69	
UPDATE job1 SET lock_time = 1000069, lock_expire = 1000069 WHERE id = 1000069;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000069;
id	lock_time	lock_expire	lock_owner
1000069	1000069	1000069	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000070;
id	lock_time	lock_expire	lock_owner
1000070	70	70	
UPDATE job1 SET lock_time = 1000070, lock_expire = 1000070 WHERE id = 1000070;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000070;
id	lock_time	lock_expire	lock_owner
1000070	1000070	1000070	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000072;
id	lock_time	lock_expire	lock_owner
1000072	72	72	
UPDATE job1 SET lock_time = 1000072, lock_expire = 1000072 WHERE id = 1000072;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000072;
id	lock_time	lock_expire	lock_owner
1000072	1000072	1000072	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000073;
id	lock_time	lock_expire	lock_owner
1000073	73	73	
UPDATE job1 SET lock_time = 1000073, lock_expire = 1000073 WHERE id = 1000073;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000073;
id	lock_time	lock_expire	lock_owner
1000073	1000073	1000073	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000074;
id	lock_time	lock_expire	lock_owner
1000074	74	74	
UPDATE job1 SET lock_time = 1000074, lock_expire = 1000074 WHERE id = 1000074;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000074;
id	lock_time	lock_expire	lock_owner
1000074	1000074	1000074	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000075;
id	lock_time	lock_expire	lock_owner
1000075	75	75	
UPDATE job1 SET lock_time = 1000075, lock_expire = 1000075 WHERE id = 1000075;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000075;
id	lock_time	lock_expire	lock_owner
1000075	1000075	1000075	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000077;
id	lock_time	lock_expire	lock_owner
1000077	77	77	
UPDATE job1 SET lock_time = 1000077, lock_expire = 1000077 WHERE id = 1000077;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000077;
id	lock_time	lock_expire	lock_owner
1000077	1000077	1000077	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000078;
id	lock_time	lock_expire	lock_owner
1000078	78	78	
UPDATE job1 SET lock_time = 1000078, lock_expire = 1000078 WHERE id = 1000078;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000078;
id	lock_time	lock_expire	lock_owner
1000078	1000078	1000078	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000079;
id	lock_time	lock_expire	lock_owner
1000079	79	79	
UPDATE job1 SET lock_time = 1000079, lock_expire = 1000079 WHERE id = 1000079;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000079;
id	lock_time	lock_expire	lock_owner
1000079	1000079	1000079	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000080;
id	lock_time	lock_expire	lock_owner
1000080	80	80	
UPDATE job1 SET lock_time = 1000080, lock_expire = 1000080 WHERE id = 1000080;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000080;
id	lock_time	lock_expire	lock_owner
1000080	1000080	1000080	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000082;
id	lock_time	lock_expire	lock_owner
1000082	82	82	
UPDATE job1 SET lock_time = 1000082, lock_expire = 1000082 WHERE id = 1000082;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000082;
id	lock_time	lock_expire	lock_owner
1000082	1000082	1000082	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000083;
id	lock_time	lock_expire	lock_owner
1000083	83	83	
UPDATE job1 SET lock_time = 1000083, lock_expire = 1000083 WHERE id = 1000083;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000083;
id	lock_time	lock_expire	lock_owner
1000083	1000083	1000083	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000084;
id	lock_time	lock_expire	lock_owner
1000084	84	84	
UPDATE job1 SET lock_time = 1000084, lock_expire = 1000084 WHERE id = 1000084;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000084;
id	lock_time	lock_expire	lock_owner
1000084	1000084	1000084	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000085;
id	lock_time	lock_expire	lock_owner
1000085	85	85	
UPDATE job1 SET lock_time = 1000085, lock_expire = 1000085 WHERE id = 1000085;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000085;
id	lock_time	lock_expire	lock_owner
1000085	1000085	1000085	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000087;
id	lock_time	lock_expire	lock_owner
1000087	87	87	
UPDATE job1 SET lock_time = 1000087, lock_expire = 1000087 WHERE id = 1000087;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000087;
id	lock_time	lock_expire	lock_owner
1000087	1000087	1000087	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000088;
id	lock_time	lock_expire	lock_owner
1000088	88	88	
UPDATE job1 SET lock_time = 1000088, lock_expire = 1000088 WHERE id = 1000088;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000088;
id	lock_time	lock_expire	lock_owner
1000088	1000088	1000088	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000089;
id	lock_time	lock_expire	lock_owner
1000089	89	89	
UPDATE job1 SET lock_time = 1000089, lock_expire = 1000089 WHERE id = 1000089;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000089;
id	lock_time	lock_expire	lock_owner
1000089	1000089	1000089	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000090;
id	lock_time	lock_expire	lock_owner
1000090	90	90	
UPDATE job1 SET lock_time = 1000090, lock_expire = 1000090 WHERE id = 1000090;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000090;
id	lock_time	lock_expire	lock_owner
1000090	1000090	1000090	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000092;
id	lock_time	lock_expire	lock_owner
1000092	92	92	
UPDATE job1 SET lock_time = 1000092, lock_expire = 1000092 WHERE id = 1000092;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000092;
id	lock_time	lock_expire	lock_owner
1000092	1000092	1000092	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000093;
id	lock_time	lock_expire	lock_owner
1000093	93	93	
UPDATE job1 SET lock_time = 1000093, lock_expire = 1000093 WHERE id = 1000093;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000093;
id	lock_time	lock_expire	lock_owner
1000093	1000093	1000093	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000094;
id	lock_time	lock_expire	lock_owner
1000094	94	94	
UPDATE job1 SET lock_time = 1000094, lock_expire = 1000094 WHERE id = 1000094;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000094;
id	lock_time	lock_expire	lock_owner
1000094	1000094	1000094	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000095;
id	lock_time	lock_expire	lock_owner
1000095	95	95	
UPDATE job1 SET lock_time = 1000095, lock_expire = 1000095 WHERE id = 1000095;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000095;
id	lock_time	lock_expire	lock_owner
1000095	1000095	1000095	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000097;
id	lock_time	lock_expire	lock_owner
1000097	97	97	
UPDATE job1 SET lock_time = 1000097, lock_expire = 1000097 WHERE id = 1000097;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000097;
id	lock_time	lock_expire	lock_owner
1000097	1000097	1000097	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000098;
id	lock_time	lock_expire	lock_owner
1000098	98	98	
UPDATE job1 SET lock_time = 1000098, lock_expire = 1000098 WHERE id = 1000098;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000098;
id	lock_time	lock_expire	lock_owner
1000098	1000098	1000098	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000099;
id	lock_time	lock_expire	lock_owner
1000099	99	99	
UPDATE job1 SET lock_time = 1000099, lock_expire = 1000099 WHERE id = 1000099;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000099;
id	lock_time	lock_expire	lock_owner
1000099	1000099	1000099	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000100;
id	lock_time	lock_expire	lock_owner
1000100	100	100	
UPDATE job1 SET lock_time = 1000100, lock_expire = 1000100 WHERE id = 1000100;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000100;
id	lock_time	lock_expire	lock_owner
1000100	1000100	1000100	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000102;
id	lock_time	lock_expire	lock_owner
1000102	102	102	
UPDATE job1 SET lock_time = 1000102, lock_expire = 1000102 WHERE id = 1000102;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000102;
id	lock_time	lock_expire	lock_owner
1000102	1000102	1000102	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000103;
id	lock_time	lock_expire	lock_owner
1000103	103	103	
UPDATE job1 SET lock_time = 1000103, lock_expire = 1000103 WHERE id = 1000103;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000103;
id	lock_time	lock_expire	lock_owner
1000103	1000103	1000103	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000104;
id	lock_time	lock_expire	lock_owner
1000104	104	104	
UPDATE job1 SET lock_time = 1000104, lock_expire = 1000104 WHERE id = 1000104;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000104;
id	lock_time	lock_expire	lock_owner
1000104	1000104	1000104	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000105;
id	lock_time	lock_expire	lock_owner
1000105	105	105	
UPDATE job1 SET lock_time = 1000105, lock_expire = 1000105 WHERE id = 1000105;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000105;
id	lock_time	lock_expire	lock_owner
1000105	1000105	1000105	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000107;
id	lock_time	lock_expire	lock_owner
1000107	107	107	
UPDATE job1 SET lock_time = 1000107, lock_expire = 1000107 WHERE id = 1000107;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000107;
id	lock_time	lock_expire	lock_owner
1000107	1000107	1000107	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000108;
id	lock_time	lock_expire	lock_owner
1000108	108	108	
UPDATE job1 SET lock_time = 1000108, lock_expire = 1000108 WHERE id = 1000108;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000108;
id	lock_time	lock_expire	lock_owner
1000108	1000108	1000108	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000109;
id	lock_time	lock_expire	lock_owner
1000109	109	109	
UPDATE job1 SET lock_time = 1000109, lock_expire = 1000109 WHERE id = 1000109;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000109;
id	lock_time	lock_expire	lock_owner
1000109	1000109	1000109	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000110;
id	lock_time	lock_expire	lock_owner
1000110	110	110	
UPDATE job1 SET lock_time = 1000110, lock_expire = 1000110 WHERE id = 1000110;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000110;
id	lock_time	lock_expire	lock_owner
1000110	1000110	1000110	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000112;
id	lock_time	lock_expire	lock_owner
1000112	112	112	
UPDATE job1 SET lock_time = 1000112, lock_expire = 1000112 WHERE id = 1000112;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000112;
id	lock_time	lock_expire	lock_owner
1000112	1000112	1000112	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000113;
id	lock_time	lock_expire	lock_owner
1000113	113	113	
UPDATE job1 SET lock_time = 1000113, lock_expire = 1000113 WHERE id = 1000113;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000113;
id	lock_time	lock_expire	lock_owner
1000113	1000113	1000113	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000114;
id	lock_time	lock_expire	lock_owner
1000114	114	114	
UPDATE job1 SET lock_time = 1000114, lock_expire = 1000114 WHERE id = 1000114;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000114;
id	lock_time	lock_expire	lock_owner
1000114	1000114	1000114	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000115;
id	lock_time	lock_expire	lock_owner
1000115	115	115	
UPDATE job1 SET lock_time = 1000115, lock_expire = 1000115 WHERE id = 1000115;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000115;
id	lock_time	lock_expire	lock_owner
1000115	1000115	1000115	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000117;
id	lock_time	lock_expire	lock_owner
1000117	117	117	
UPDATE job1 SET lock_time = 1000117, lock_expire = 1000117 WHERE id = 1000117;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000117;
id	lock_time	lock_expire	lock_owner
1000117	1000117	1000117	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000118;
id	lock_time	lock_expire	lock_owner
1000118	118	118	
UPDATE job1 SET lock_time = 1000118, lock_expire = 1000118 WHERE id = 1000118;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000118;
id	lock_time	lock_expire	lock_owner
1000118	1000118	1000118	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000119;
id	lock_time	lock_expire	lock_owner
1000119	119	119	
UPDATE job1 SET lock_time = 1000119, lock_expire = 1000119 WHERE id = 1000119;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000119;
id	lock_time	lock_expire	lock_owner
1000119	1000119	1000119	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000120;
id	lock_time	lock_expire	lock_owner
1000120	120	120	
UPDATE job1 SET lock_time = 1000120, lock_expire = 1000120 WHERE id = 1000120;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000120;
id	lock_time	lock_expire	lock_owner
1000120	1000120	1000120	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000122;
id	lock_time	lock_expire	lock_owner
1000122	122	122	
UPDATE job1 SET lock_time = 1000122, lock_expire = 1000122 WHERE id = 1000122;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000122;
id	lock_time	lock_expire	lock_owner
1000122	1000122	1000122	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000123;
id	lock_time	lock_expire	lock_owner
1000123	123	123	
UPDATE job1 SET lock_time = 1000123, lock_expire = 1000123 WHERE id = 1000123;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000123;
id	lock_time	lock_expire	lock_owner
1000123	1000123	1000123	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000124;
id	lock_time	lock_expire	lock_owner
1000124	124	124	
UPDATE job1 SET lock_time = 1000124, lock_expire = 1000124 WHERE id = 1000124;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000124;
id	lock_time	lock_expire	lock_owner
1000124	1000124	1000124	
set autocommit=0;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000125;
id	lock_time	lock_expire	lock_owner
1000125	125	125	
UPDATE job1 SET lock_time = 1000125, lock_expire = 1000125 WHERE id = 1000125;
SELECT id, lock_time, lock_expire, lock_owner FROM job1 WHERE id = 1000125;
id	lock_time	lock_expire	lock_owner
1000125	1000125	1000125	
drop table job1;
#########################################################################
###
### (10) Job queue 2 : job2_index and job2_to_reviewer
###
#########################################################################
CREATE TABLE `job2_index` (
`id` bigint(20) NOT NULL,
`type` int(11) DEFAULT NULL,
`status` tinyint(4) DEFAULT '1',
`owner` bigint(20) DEFAULT NULL,
`queue` bigint(20) DEFAULT NULL,
`updated` bigint(20) DEFAULT NULL,
`created` bigint(20) NOT NULL,
`priority` int(11) NOT NULL DEFAULT '0',
`ephemeral` tinyint(1) NOT NULL DEFAULT '0',
PRIMARY KEY (`id`),
KEY `type` (`type`),
KEY `status` (`status`),
KEY `owner` (`owner`),
KEY `assignquery2` (`queue`,`status`,`owner`,`priority`,`created`),
KEY `assignquery` (`queue`,`status`,`owner`,`priority`,`updated`),
KEY `ephemeral_owner` (`ephemeral`,`owner`),
KEY `priority_and_created` (`priority`,`created`),
KEY `queue_job_owners` (`queue`,`owner`,`priority`,`created`),
KEY `type_created` (`type`,`created`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
CREATE TABLE `job2_to_reviewer` (
`job_id` bigint(20),
`reviewer_id` bigint(20) NOT NULL,
`timestamp` bigint(20) NOT NULL,
KEY `job_id` (`job_id`),
KEY `reviewer_id` (`reviewer_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
set autocommit=0;
Claim 5 jobs in queue 1
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=1 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1, updated=1
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1 and updated = 1;
id	type	status	owner	queue	updated	created	priority	ephemeral
10011	1	1	1	1	1	1000011	0	0
10012	1	1	1	1	1	1000012	0	0
10013	1	1	1	1	1	1000013	0	0
10014	1	1	1	1	1	1000014	0	0
10015	1	1	1	1	1	1000015	0	0
set autocommit=0;
Claim 5 jobs in queue 2
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=2 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=2, updated=2
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 2 and updated = 2;
id	type	status	owner	queue	updated	created	priority	ephemeral
10021	1	1	2	2	2	1000021	0	0
10022	1	1	2	2	2	1000022	0	0
10023	1	1	2	2	2	1000023	0	0
10024	1	1	2	2	2	1000024	0	0
10025	1	1	2	2	2	1000025	0	0
set autocommit=0;
Claim 5 jobs in queue 3
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=3 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=3, updated=3
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 3 and updated = 3;
id	type	status	owner	queue	updated	created	priority	ephemeral
10031	1	1	3	3	3	1000031	0	0
10032	1	1	3	3	3	1000032	0	0
10033	1	1	3	3	3	1000033	0	0
10034	1	1	3	3	3	1000034	0	0
10035	1	1	3	3	3	1000035	0	0
set autocommit=0;
Claim 5 jobs in queue 4
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=4 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=4, updated=4
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 4 and updated = 4;
id	type	status	owner	queue	updated	created	priority	ephemeral
10041	1	1	4	4	4	1000041	0	0
10042	1	1	4	4	4	1000042	0	0
10043	1	1	4	4	4	1000043	0	0
10044	1	1	4	4	4	1000044	0	0
10045	1	1	4	4	4	1000045	0	0
set autocommit=0;
Claim 5 jobs in queue 5
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=5 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=5, updated=5
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 5 and updated = 5;
id	type	status	owner	queue	updated	created	priority	ephemeral
10051	1	1	5	5	5	1000051	0	0
10052	1	1	5	5	5	1000052	0	0
10053	1	1	5	5	5	1000053	0	0
10054	1	1	5	5	5	1000054	0	0
10055	1	1	5	5	5	1000055	0	0
set autocommit=0;
Claim 5 jobs in queue 6
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=6 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=6, updated=6
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 6 and updated = 6;
id	type	status	owner	queue	updated	created	priority	ephemeral
10061	1	1	6	6	6	1000061	0	0
10062	1	1	6	6	6	1000062	0	0
10063	1	1	6	6	6	1000063	0	0
10064	1	1	6	6	6	1000064	0	0
10065	1	1	6	6	6	1000065	0	0
set autocommit=0;
Claim 5 jobs in queue 7
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=7 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=7, updated=7
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 7 and updated = 7;
id	type	status	owner	queue	updated	created	priority	ephemeral
10071	1	1	7	7	7	1000071	0	0
10072	1	1	7	7	7	1000072	0	0
10073	1	1	7	7	7	1000073	0	0
10074	1	1	7	7	7	1000074	0	0
10075	1	1	7	7	7	1000075	0	0
set autocommit=0;
Claim 5 jobs in queue 8
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=8 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=8, updated=8
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 8 and updated = 8;
id	type	status	owner	queue	updated	created	priority	ephemeral
10081	1	1	8	8	8	1000081	0	0
10082	1	1	8	8	8	1000082	0	0
10083	1	1	8	8	8	1000083	0	0
10084	1	1	8	8	8	1000084	0	0
10085	1	1	8	8	8	1000085	0	0
set autocommit=0;
Claim 5 jobs in queue 9
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=9 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=9, updated=9
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 9 and updated = 9;
id	type	status	owner	queue	updated	created	priority	ephemeral
10091	1	1	9	9	9	1000091	0	0
10092	1	1	9	9	9	1000092	0	0
10093	1	1	9	9	9	1000093	0	0
10094	1	1	9	9	9	1000094	0	0
10095	1	1	9	9	9	1000095	0	0
set autocommit=0;
Claim 5 jobs in queue 10
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=10 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=10, updated=10
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 10 and updated = 10;
id	type	status	owner	queue	updated	created	priority	ephemeral
10101	1	1	10	10	10	1000101	0	0
10102	1	1	10	10	10	1000102	0	0
10103	1	1	10	10	10	1000103	0	0
10104	1	1	10	10	10	1000104	0	0
10105	1	1	10	10	10	1000105	0	0
set autocommit=0;
Claim 5 jobs in queue 11
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=11 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=11, updated=11
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 11 and updated = 11;
id	type	status	owner	queue	updated	created	priority	ephemeral
10111	1	1	11	11	11	1000111	0	0
10112	1	1	11	11	11	1000112	0	0
10113	1	1	11	11	11	1000113	0	0
10114	1	1	11	11	11	1000114	0	0
10115	1	1	11	11	11	1000115	0	0
set autocommit=0;
Claim 5 jobs in queue 12
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=12 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=12, updated=12
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 12 and updated = 12;
id	type	status	owner	queue	updated	created	priority	ephemeral
10121	1	1	12	12	12	1000121	0	0
10122	1	1	12	12	12	1000122	0	0
10123	1	1	12	12	12	1000123	0	0
10124	1	1	12	12	12	1000124	0	0
10125	1	1	12	12	12	1000125	0	0
set autocommit=0;
Claim 5 jobs in queue 13
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=13 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=13, updated=13
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 13 and updated = 13;
id	type	status	owner	queue	updated	created	priority	ephemeral
10131	1	1	13	13	13	1000131	0	0
10132	1	1	13	13	13	1000132	0	0
10133	1	1	13	13	13	1000133	0	0
10134	1	1	13	13	13	1000134	0	0
10135	1	1	13	13	13	1000135	0	0
set autocommit=0;
Claim 5 jobs in queue 14
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=14 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=14, updated=14
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 14 and updated = 14;
id	type	status	owner	queue	updated	created	priority	ephemeral
10141	1	1	14	14	14	1000141	0	0
10142	1	1	14	14	14	1000142	0	0
10143	1	1	14	14	14	1000143	0	0
10144	1	1	14	14	14	1000144	0	0
10145	1	1	14	14	14	1000145	0	0
set autocommit=0;
Claim 5 jobs in queue 15
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=15 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=15, updated=15
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 15 and updated = 15;
id	type	status	owner	queue	updated	created	priority	ephemeral
10151	1	1	15	15	15	1000151	0	0
10152	1	1	15	15	15	1000152	0	0
10153	1	1	15	15	15	1000153	0	0
10154	1	1	15	15	15	1000154	0	0
10155	1	1	15	15	15	1000155	0	0
set autocommit=0;
Claim 5 jobs in queue 16
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=16 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=16, updated=16
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 16 and updated = 16;
id	type	status	owner	queue	updated	created	priority	ephemeral
10161	1	1	16	16	16	1000161	0	0
10162	1	1	16	16	16	1000162	0	0
10163	1	1	16	16	16	1000163	0	0
10164	1	1	16	16	16	1000164	0	0
10165	1	1	16	16	16	1000165	0	0
set autocommit=0;
Claim 5 jobs in queue 17
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=17 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=17, updated=17
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 17 and updated = 17;
id	type	status	owner	queue	updated	created	priority	ephemeral
10171	1	1	17	17	17	1000171	0	0
10172	1	1	17	17	17	1000172	0	0
10173	1	1	17	17	17	1000173	0	0
10174	1	1	17	17	17	1000174	0	0
10175	1	1	17	17	17	1000175	0	0
set autocommit=0;
Claim 5 jobs in queue 18
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=18 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=18, updated=18
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 18 and updated = 18;
id	type	status	owner	queue	updated	created	priority	ephemeral
10181	1	1	18	18	18	1000181	0	0
10182	1	1	18	18	18	1000182	0	0
10183	1	1	18	18	18	1000183	0	0
10184	1	1	18	18	18	1000184	0	0
10185	1	1	18	18	18	1000185	0	0
set autocommit=0;
Claim 5 jobs in queue 19
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=19 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=19, updated=19
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 19 and updated = 19;
id	type	status	owner	queue	updated	created	priority	ephemeral
10191	1	1	19	19	19	1000191	0	0
10192	1	1	19	19	19	1000192	0	0
10193	1	1	19	19	19	1000193	0	0
10194	1	1	19	19	19	1000194	0	0
10195	1	1	19	19	19	1000195	0	0
set autocommit=0;
Claim 5 jobs in queue 20
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=20 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=20, updated=20
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 20 and updated = 20;
id	type	status	owner	queue	updated	created	priority	ephemeral
10201	1	1	20	20	20	1000201	0	0
10202	1	1	20	20	20	1000202	0	0
10203	1	1	20	20	20	1000203	0	0
10204	1	1	20	20	20	1000204	0	0
10205	1	1	20	20	20	1000205	0	0
set autocommit=0;
Claim 5 jobs in queue 21
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=21 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=21, updated=21
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 21 and updated = 21;
id	type	status	owner	queue	updated	created	priority	ephemeral
10211	1	1	21	21	21	1000211	0	0
10212	1	1	21	21	21	1000212	0	0
10213	1	1	21	21	21	1000213	0	0
10214	1	1	21	21	21	1000214	0	0
10215	1	1	21	21	21	1000215	0	0
set autocommit=0;
Claim 5 jobs in queue 22
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=22 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=22, updated=22
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 22 and updated = 22;
id	type	status	owner	queue	updated	created	priority	ephemeral
10221	1	1	22	22	22	1000221	0	0
10222	1	1	22	22	22	1000222	0	0
10223	1	1	22	22	22	1000223	0	0
10224	1	1	22	22	22	1000224	0	0
10225	1	1	22	22	22	1000225	0	0
set autocommit=0;
Claim 5 jobs in queue 23
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=23 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=23, updated=23
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 23 and updated = 23;
id	type	status	owner	queue	updated	created	priority	ephemeral
10231	1	1	23	23	23	1000231	0	0
10232	1	1	23	23	23	1000232	0	0
10233	1	1	23	23	23	1000233	0	0
10234	1	1	23	23	23	1000234	0	0
10235	1	1	23	23	23	1000235	0	0
set autocommit=0;
Claim 5 jobs in queue 24
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=24 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=24, updated=24
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 24 and updated = 24;
id	type	status	owner	queue	updated	created	priority	ephemeral
10241	1	1	24	24	24	1000241	0	0
10242	1	1	24	24	24	1000242	0	0
10243	1	1	24	24	24	1000243	0	0
10244	1	1	24	24	24	1000244	0	0
10245	1	1	24	24	24	1000245	0	0
set autocommit=0;
Claim 5 jobs in queue 25
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=25 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=25, updated=25
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 25 and updated = 25;
id	type	status	owner	queue	updated	created	priority	ephemeral
10251	1	1	25	25	25	1000251	0	0
10252	1	1	25	25	25	1000252	0	0
10253	1	1	25	25	25	1000253	0	0
10254	1	1	25	25	25	1000254	0	0
10255	1	1	25	25	25	1000255	0	0
set autocommit=0;
Claim 5 jobs in queue 26
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=26 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=26, updated=26
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 26 and updated = 26;
id	type	status	owner	queue	updated	created	priority	ephemeral
10261	1	1	26	26	26	1000261	0	0
10262	1	1	26	26	26	1000262	0	0
10263	1	1	26	26	26	1000263	0	0
10264	1	1	26	26	26	1000264	0	0
10265	1	1	26	26	26	1000265	0	0
set autocommit=0;
Claim 5 jobs in queue 27
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=27 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=27, updated=27
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 27 and updated = 27;
id	type	status	owner	queue	updated	created	priority	ephemeral
10271	1	1	27	27	27	1000271	0	0
10272	1	1	27	27	27	1000272	0	0
10273	1	1	27	27	27	1000273	0	0
10274	1	1	27	27	27	1000274	0	0
10275	1	1	27	27	27	1000275	0	0
set autocommit=0;
Claim 5 jobs in queue 28
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=28 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=28, updated=28
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 28 and updated = 28;
id	type	status	owner	queue	updated	created	priority	ephemeral
10281	1	1	28	28	28	1000281	0	0
10282	1	1	28	28	28	1000282	0	0
10283	1	1	28	28	28	1000283	0	0
10284	1	1	28	28	28	1000284	0	0
10285	1	1	28	28	28	1000285	0	0
set autocommit=0;
Claim 5 jobs in queue 29
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=29 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=29, updated=29
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 29 and updated = 29;
id	type	status	owner	queue	updated	created	priority	ephemeral
10291	1	1	29	29	29	1000291	0	0
10292	1	1	29	29	29	1000292	0	0
10293	1	1	29	29	29	1000293	0	0
10294	1	1	29	29	29	1000294	0	0
10295	1	1	29	29	29	1000295	0	0
set autocommit=0;
Claim 5 jobs in queue 30
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=30 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=30, updated=30
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 30 and updated = 30;
id	type	status	owner	queue	updated	created	priority	ephemeral
10301	1	1	30	30	30	1000301	0	0
10302	1	1	30	30	30	1000302	0	0
10303	1	1	30	30	30	1000303	0	0
10304	1	1	30	30	30	1000304	0	0
10305	1	1	30	30	30	1000305	0	0
set autocommit=0;
Claim 5 jobs in queue 31
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=31 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=31, updated=31
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 31 and updated = 31;
id	type	status	owner	queue	updated	created	priority	ephemeral
10311	1	1	31	31	31	1000311	0	0
10312	1	1	31	31	31	1000312	0	0
10313	1	1	31	31	31	1000313	0	0
10314	1	1	31	31	31	1000314	0	0
10315	1	1	31	31	31	1000315	0	0
set autocommit=0;
Claim 5 jobs in queue 32
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=32 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=32, updated=32
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 32 and updated = 32;
id	type	status	owner	queue	updated	created	priority	ephemeral
10321	1	1	32	32	32	1000321	0	0
10322	1	1	32	32	32	1000322	0	0
10323	1	1	32	32	32	1000323	0	0
10324	1	1	32	32	32	1000324	0	0
10325	1	1	32	32	32	1000325	0	0
set autocommit=0;
Claim 5 jobs in queue 33
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=33 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=33, updated=33
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 33 and updated = 33;
id	type	status	owner	queue	updated	created	priority	ephemeral
10331	1	1	33	33	33	1000331	0	0
10332	1	1	33	33	33	1000332	0	0
10333	1	1	33	33	33	1000333	0	0
10334	1	1	33	33	33	1000334	0	0
10335	1	1	33	33	33	1000335	0	0
set autocommit=0;
Claim 5 jobs in queue 34
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=34 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=34, updated=34
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 34 and updated = 34;
id	type	status	owner	queue	updated	created	priority	ephemeral
10341	1	1	34	34	34	1000341	0	0
10342	1	1	34	34	34	1000342	0	0
10343	1	1	34	34	34	1000343	0	0
10344	1	1	34	34	34	1000344	0	0
10345	1	1	34	34	34	1000345	0	0
set autocommit=0;
Claim 5 jobs in queue 35
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=35 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=35, updated=35
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 35 and updated = 35;
id	type	status	owner	queue	updated	created	priority	ephemeral
10351	1	1	35	35	35	1000351	0	0
10352	1	1	35	35	35	1000352	0	0
10353	1	1	35	35	35	1000353	0	0
10354	1	1	35	35	35	1000354	0	0
10355	1	1	35	35	35	1000355	0	0
set autocommit=0;
Claim 5 jobs in queue 36
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=36 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=36, updated=36
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 36 and updated = 36;
id	type	status	owner	queue	updated	created	priority	ephemeral
10361	1	1	36	36	36	1000361	0	0
10362	1	1	36	36	36	1000362	0	0
10363	1	1	36	36	36	1000363	0	0
10364	1	1	36	36	36	1000364	0	0
10365	1	1	36	36	36	1000365	0	0
set autocommit=0;
Claim 5 jobs in queue 37
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=37 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=37, updated=37
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 37 and updated = 37;
id	type	status	owner	queue	updated	created	priority	ephemeral
10371	1	1	37	37	37	1000371	0	0
10372	1	1	37	37	37	1000372	0	0
10373	1	1	37	37	37	1000373	0	0
10374	1	1	37	37	37	1000374	0	0
10375	1	1	37	37	37	1000375	0	0
set autocommit=0;
Claim 5 jobs in queue 38
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=38 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=38, updated=38
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 38 and updated = 38;
id	type	status	owner	queue	updated	created	priority	ephemeral
10381	1	1	38	38	38	1000381	0	0
10382	1	1	38	38	38	1000382	0	0
10383	1	1	38	38	38	1000383	0	0
10384	1	1	38	38	38	1000384	0	0
10385	1	1	38	38	38	1000385	0	0
set autocommit=0;
Claim 5 jobs in queue 39
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=39 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=39, updated=39
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 39 and updated = 39;
id	type	status	owner	queue	updated	created	priority	ephemeral
10391	1	1	39	39	39	1000391	0	0
10392	1	1	39	39	39	1000392	0	0
10393	1	1	39	39	39	1000393	0	0
10394	1	1	39	39	39	1000394	0	0
10395	1	1	39	39	39	1000395	0	0
set autocommit=0;
Claim 5 jobs in queue 40
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=40 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=40, updated=40
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 40 and updated = 40;
id	type	status	owner	queue	updated	created	priority	ephemeral
10401	1	1	40	40	40	1000401	0	0
10402	1	1	40	40	40	1000402	0	0
10403	1	1	40	40	40	1000403	0	0
10404	1	1	40	40	40	1000404	0	0
10405	1	1	40	40	40	1000405	0	0
set autocommit=0;
Claim 5 jobs in queue 41
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=41 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=41, updated=41
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 41 and updated = 41;
id	type	status	owner	queue	updated	created	priority	ephemeral
10411	1	1	41	41	41	1000411	0	0
10412	1	1	41	41	41	1000412	0	0
10413	1	1	41	41	41	1000413	0	0
10414	1	1	41	41	41	1000414	0	0
10415	1	1	41	41	41	1000415	0	0
set autocommit=0;
Claim 5 jobs in queue 42
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=42 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=42, updated=42
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 42 and updated = 42;
id	type	status	owner	queue	updated	created	priority	ephemeral
10421	1	1	42	42	42	1000421	0	0
10422	1	1	42	42	42	1000422	0	0
10423	1	1	42	42	42	1000423	0	0
10424	1	1	42	42	42	1000424	0	0
10425	1	1	42	42	42	1000425	0	0
set autocommit=0;
Claim 5 jobs in queue 43
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=43 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=43, updated=43
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 43 and updated = 43;
id	type	status	owner	queue	updated	created	priority	ephemeral
10431	1	1	43	43	43	1000431	0	0
10432	1	1	43	43	43	1000432	0	0
10433	1	1	43	43	43	1000433	0	0
10434	1	1	43	43	43	1000434	0	0
10435	1	1	43	43	43	1000435	0	0
set autocommit=0;
Claim 5 jobs in queue 44
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=44 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=44, updated=44
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 44 and updated = 44;
id	type	status	owner	queue	updated	created	priority	ephemeral
10441	1	1	44	44	44	1000441	0	0
10442	1	1	44	44	44	1000442	0	0
10443	1	1	44	44	44	1000443	0	0
10444	1	1	44	44	44	1000444	0	0
10445	1	1	44	44	44	1000445	0	0
set autocommit=0;
Claim 5 jobs in queue 45
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=45 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=45, updated=45
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 45 and updated = 45;
id	type	status	owner	queue	updated	created	priority	ephemeral
10451	1	1	45	45	45	1000451	0	0
10452	1	1	45	45	45	1000452	0	0
10453	1	1	45	45	45	1000453	0	0
10454	1	1	45	45	45	1000454	0	0
10455	1	1	45	45	45	1000455	0	0
set autocommit=0;
Claim 5 jobs in queue 46
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=46 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=46, updated=46
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 46 and updated = 46;
id	type	status	owner	queue	updated	created	priority	ephemeral
10461	1	1	46	46	46	1000461	0	0
10462	1	1	46	46	46	1000462	0	0
10463	1	1	46	46	46	1000463	0	0
10464	1	1	46	46	46	1000464	0	0
10465	1	1	46	46	46	1000465	0	0
set autocommit=0;
Claim 5 jobs in queue 47
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=47 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=47, updated=47
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 47 and updated = 47;
id	type	status	owner	queue	updated	created	priority	ephemeral
10471	1	1	47	47	47	1000471	0	0
10472	1	1	47	47	47	1000472	0	0
10473	1	1	47	47	47	1000473	0	0
10474	1	1	47	47	47	1000474	0	0
10475	1	1	47	47	47	1000475	0	0
set autocommit=0;
Claim 5 jobs in queue 48
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=48 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=48, updated=48
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 48 and updated = 48;
id	type	status	owner	queue	updated	created	priority	ephemeral
10481	1	1	48	48	48	1000481	0	0
10482	1	1	48	48	48	1000482	0	0
10483	1	1	48	48	48	1000483	0	0
10484	1	1	48	48	48	1000484	0	0
10485	1	1	48	48	48	1000485	0	0
set autocommit=0;
Claim 5 jobs in queue 49
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=49 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=49, updated=49
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 49 and updated = 49;
id	type	status	owner	queue	updated	created	priority	ephemeral
10491	1	1	49	49	49	1000491	0	0
10492	1	1	49	49	49	1000492	0	0
10493	1	1	49	49	49	1000493	0	0
10494	1	1	49	49	49	1000494	0	0
10495	1	1	49	49	49	1000495	0	0
set autocommit=0;
Claim 5 jobs in queue 50
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=50 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=50, updated=50
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 50 and updated = 50;
id	type	status	owner	queue	updated	created	priority	ephemeral
10501	1	1	50	50	50	1000501	0	0
10502	1	1	50	50	50	1000502	0	0
10503	1	1	50	50	50	1000503	0	0
10504	1	1	50	50	50	1000504	0	0
10505	1	1	50	50	50	1000505	0	0
set autocommit=0;
Claim 5 jobs in queue 51
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=51 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=51, updated=51
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 51 and updated = 51;
id	type	status	owner	queue	updated	created	priority	ephemeral
10511	1	1	51	51	51	1000511	0	0
10512	1	1	51	51	51	1000512	0	0
10513	1	1	51	51	51	1000513	0	0
10514	1	1	51	51	51	1000514	0	0
10515	1	1	51	51	51	1000515	0	0
set autocommit=0;
Claim 5 jobs in queue 52
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=52 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=52, updated=52
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 52 and updated = 52;
id	type	status	owner	queue	updated	created	priority	ephemeral
10521	1	1	52	52	52	1000521	0	0
10522	1	1	52	52	52	1000522	0	0
10523	1	1	52	52	52	1000523	0	0
10524	1	1	52	52	52	1000524	0	0
10525	1	1	52	52	52	1000525	0	0
set autocommit=0;
Claim 5 jobs in queue 53
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=53 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=53, updated=53
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 53 and updated = 53;
id	type	status	owner	queue	updated	created	priority	ephemeral
10531	1	1	53	53	53	1000531	0	0
10532	1	1	53	53	53	1000532	0	0
10533	1	1	53	53	53	1000533	0	0
10534	1	1	53	53	53	1000534	0	0
10535	1	1	53	53	53	1000535	0	0
set autocommit=0;
Claim 5 jobs in queue 54
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=54 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=54, updated=54
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 54 and updated = 54;
id	type	status	owner	queue	updated	created	priority	ephemeral
10541	1	1	54	54	54	1000541	0	0
10542	1	1	54	54	54	1000542	0	0
10543	1	1	54	54	54	1000543	0	0
10544	1	1	54	54	54	1000544	0	0
10545	1	1	54	54	54	1000545	0	0
set autocommit=0;
Claim 5 jobs in queue 55
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=55 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=55, updated=55
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 55 and updated = 55;
id	type	status	owner	queue	updated	created	priority	ephemeral
10551	1	1	55	55	55	1000551	0	0
10552	1	1	55	55	55	1000552	0	0
10553	1	1	55	55	55	1000553	0	0
10554	1	1	55	55	55	1000554	0	0
10555	1	1	55	55	55	1000555	0	0
set autocommit=0;
Claim 5 jobs in queue 56
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=56 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=56, updated=56
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 56 and updated = 56;
id	type	status	owner	queue	updated	created	priority	ephemeral
10561	1	1	56	56	56	1000561	0	0
10562	1	1	56	56	56	1000562	0	0
10563	1	1	56	56	56	1000563	0	0
10564	1	1	56	56	56	1000564	0	0
10565	1	1	56	56	56	1000565	0	0
set autocommit=0;
Claim 5 jobs in queue 57
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=57 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=57, updated=57
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 57 and updated = 57;
id	type	status	owner	queue	updated	created	priority	ephemeral
10571	1	1	57	57	57	1000571	0	0
10572	1	1	57	57	57	1000572	0	0
10573	1	1	57	57	57	1000573	0	0
10574	1	1	57	57	57	1000574	0	0
10575	1	1	57	57	57	1000575	0	0
set autocommit=0;
Claim 5 jobs in queue 58
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=58 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=58, updated=58
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 58 and updated = 58;
id	type	status	owner	queue	updated	created	priority	ephemeral
10581	1	1	58	58	58	1000581	0	0
10582	1	1	58	58	58	1000582	0	0
10583	1	1	58	58	58	1000583	0	0
10584	1	1	58	58	58	1000584	0	0
10585	1	1	58	58	58	1000585	0	0
set autocommit=0;
Claim 5 jobs in queue 59
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=59 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=59, updated=59
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 59 and updated = 59;
id	type	status	owner	queue	updated	created	priority	ephemeral
10591	1	1	59	59	59	1000591	0	0
10592	1	1	59	59	59	1000592	0	0
10593	1	1	59	59	59	1000593	0	0
10594	1	1	59	59	59	1000594	0	0
10595	1	1	59	59	59	1000595	0	0
set autocommit=0;
Claim 5 jobs in queue 60
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=60 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=60, updated=60
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 60 and updated = 60;
id	type	status	owner	queue	updated	created	priority	ephemeral
10601	1	1	60	60	60	1000601	0	0
10602	1	1	60	60	60	1000602	0	0
10603	1	1	60	60	60	1000603	0	0
10604	1	1	60	60	60	1000604	0	0
10605	1	1	60	60	60	1000605	0	0
set autocommit=0;
Claim 5 jobs in queue 61
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=61 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=61, updated=61
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 61 and updated = 61;
id	type	status	owner	queue	updated	created	priority	ephemeral
10611	1	1	61	61	61	1000611	0	0
10612	1	1	61	61	61	1000612	0	0
10613	1	1	61	61	61	1000613	0	0
10614	1	1	61	61	61	1000614	0	0
10615	1	1	61	61	61	1000615	0	0
set autocommit=0;
Claim 5 jobs in queue 62
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=62 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=62, updated=62
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 62 and updated = 62;
id	type	status	owner	queue	updated	created	priority	ephemeral
10621	1	1	62	62	62	1000621	0	0
10622	1	1	62	62	62	1000622	0	0
10623	1	1	62	62	62	1000623	0	0
10624	1	1	62	62	62	1000624	0	0
10625	1	1	62	62	62	1000625	0	0
set autocommit=0;
Claim 5 jobs in queue 63
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=63 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=63, updated=63
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 63 and updated = 63;
id	type	status	owner	queue	updated	created	priority	ephemeral
10631	1	1	63	63	63	1000631	0	0
10632	1	1	63	63	63	1000632	0	0
10633	1	1	63	63	63	1000633	0	0
10634	1	1	63	63	63	1000634	0	0
10635	1	1	63	63	63	1000635	0	0
set autocommit=0;
Claim 5 jobs in queue 64
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=64 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=64, updated=64
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 64 and updated = 64;
id	type	status	owner	queue	updated	created	priority	ephemeral
10641	1	1	64	64	64	1000641	0	0
10642	1	1	64	64	64	1000642	0	0
10643	1	1	64	64	64	1000643	0	0
10644	1	1	64	64	64	1000644	0	0
10645	1	1	64	64	64	1000645	0	0
set autocommit=0;
Claim 5 jobs in queue 65
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=65 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=65, updated=65
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 65 and updated = 65;
id	type	status	owner	queue	updated	created	priority	ephemeral
10651	1	1	65	65	65	1000651	0	0
10652	1	1	65	65	65	1000652	0	0
10653	1	1	65	65	65	1000653	0	0
10654	1	1	65	65	65	1000654	0	0
10655	1	1	65	65	65	1000655	0	0
set autocommit=0;
Claim 5 jobs in queue 66
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=66 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=66, updated=66
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 66 and updated = 66;
id	type	status	owner	queue	updated	created	priority	ephemeral
10661	1	1	66	66	66	1000661	0	0
10662	1	1	66	66	66	1000662	0	0
10663	1	1	66	66	66	1000663	0	0
10664	1	1	66	66	66	1000664	0	0
10665	1	1	66	66	66	1000665	0	0
set autocommit=0;
Claim 5 jobs in queue 67
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=67 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=67, updated=67
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 67 and updated = 67;
id	type	status	owner	queue	updated	created	priority	ephemeral
10671	1	1	67	67	67	1000671	0	0
10672	1	1	67	67	67	1000672	0	0
10673	1	1	67	67	67	1000673	0	0
10674	1	1	67	67	67	1000674	0	0
10675	1	1	67	67	67	1000675	0	0
set autocommit=0;
Claim 5 jobs in queue 68
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=68 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=68, updated=68
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 68 and updated = 68;
id	type	status	owner	queue	updated	created	priority	ephemeral
10681	1	1	68	68	68	1000681	0	0
10682	1	1	68	68	68	1000682	0	0
10683	1	1	68	68	68	1000683	0	0
10684	1	1	68	68	68	1000684	0	0
10685	1	1	68	68	68	1000685	0	0
set autocommit=0;
Claim 5 jobs in queue 69
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=69 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=69, updated=69
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 69 and updated = 69;
id	type	status	owner	queue	updated	created	priority	ephemeral
10691	1	1	69	69	69	1000691	0	0
10692	1	1	69	69	69	1000692	0	0
10693	1	1	69	69	69	1000693	0	0
10694	1	1	69	69	69	1000694	0	0
10695	1	1	69	69	69	1000695	0	0
set autocommit=0;
Claim 5 jobs in queue 70
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=70 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=70, updated=70
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 70 and updated = 70;
id	type	status	owner	queue	updated	created	priority	ephemeral
10701	1	1	70	70	70	1000701	0	0
10702	1	1	70	70	70	1000702	0	0
10703	1	1	70	70	70	1000703	0	0
10704	1	1	70	70	70	1000704	0	0
10705	1	1	70	70	70	1000705	0	0
set autocommit=0;
Claim 5 jobs in queue 71
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=71 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=71, updated=71
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 71 and updated = 71;
id	type	status	owner	queue	updated	created	priority	ephemeral
10711	1	1	71	71	71	1000711	0	0
10712	1	1	71	71	71	1000712	0	0
10713	1	1	71	71	71	1000713	0	0
10714	1	1	71	71	71	1000714	0	0
10715	1	1	71	71	71	1000715	0	0
set autocommit=0;
Claim 5 jobs in queue 72
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=72 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=72, updated=72
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 72 and updated = 72;
id	type	status	owner	queue	updated	created	priority	ephemeral
10721	1	1	72	72	72	1000721	0	0
10722	1	1	72	72	72	1000722	0	0
10723	1	1	72	72	72	1000723	0	0
10724	1	1	72	72	72	1000724	0	0
10725	1	1	72	72	72	1000725	0	0
set autocommit=0;
Claim 5 jobs in queue 73
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=73 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=73, updated=73
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 73 and updated = 73;
id	type	status	owner	queue	updated	created	priority	ephemeral
10731	1	1	73	73	73	1000731	0	0
10732	1	1	73	73	73	1000732	0	0
10733	1	1	73	73	73	1000733	0	0
10734	1	1	73	73	73	1000734	0	0
10735	1	1	73	73	73	1000735	0	0
set autocommit=0;
Claim 5 jobs in queue 74
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=74 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=74, updated=74
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 74 and updated = 74;
id	type	status	owner	queue	updated	created	priority	ephemeral
10741	1	1	74	74	74	1000741	0	0
10742	1	1	74	74	74	1000742	0	0
10743	1	1	74	74	74	1000743	0	0
10744	1	1	74	74	74	1000744	0	0
10745	1	1	74	74	74	1000745	0	0
set autocommit=0;
Claim 5 jobs in queue 75
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=75 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=75, updated=75
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 75 and updated = 75;
id	type	status	owner	queue	updated	created	priority	ephemeral
10751	1	1	75	75	75	1000751	0	0
10752	1	1	75	75	75	1000752	0	0
10753	1	1	75	75	75	1000753	0	0
10754	1	1	75	75	75	1000754	0	0
10755	1	1	75	75	75	1000755	0	0
set autocommit=0;
Claim 5 jobs in queue 76
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=76 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=76, updated=76
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 76 and updated = 76;
id	type	status	owner	queue	updated	created	priority	ephemeral
10761	1	1	76	76	76	1000761	0	0
10762	1	1	76	76	76	1000762	0	0
10763	1	1	76	76	76	1000763	0	0
10764	1	1	76	76	76	1000764	0	0
10765	1	1	76	76	76	1000765	0	0
set autocommit=0;
Claim 5 jobs in queue 77
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=77 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=77, updated=77
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 77 and updated = 77;
id	type	status	owner	queue	updated	created	priority	ephemeral
10771	1	1	77	77	77	1000771	0	0
10772	1	1	77	77	77	1000772	0	0
10773	1	1	77	77	77	1000773	0	0
10774	1	1	77	77	77	1000774	0	0
10775	1	1	77	77	77	1000775	0	0
set autocommit=0;
Claim 5 jobs in queue 78
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=78 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=78, updated=78
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 78 and updated = 78;
id	type	status	owner	queue	updated	created	priority	ephemeral
10781	1	1	78	78	78	1000781	0	0
10782	1	1	78	78	78	1000782	0	0
10783	1	1	78	78	78	1000783	0	0
10784	1	1	78	78	78	1000784	0	0
10785	1	1	78	78	78	1000785	0	0
set autocommit=0;
Claim 5 jobs in queue 79
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=79 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=79, updated=79
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 79 and updated = 79;
id	type	status	owner	queue	updated	created	priority	ephemeral
10791	1	1	79	79	79	1000791	0	0
10792	1	1	79	79	79	1000792	0	0
10793	1	1	79	79	79	1000793	0	0
10794	1	1	79	79	79	1000794	0	0
10795	1	1	79	79	79	1000795	0	0
set autocommit=0;
Claim 5 jobs in queue 80
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=80 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=80, updated=80
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 80 and updated = 80;
id	type	status	owner	queue	updated	created	priority	ephemeral
10801	1	1	80	80	80	1000801	0	0
10802	1	1	80	80	80	1000802	0	0
10803	1	1	80	80	80	1000803	0	0
10804	1	1	80	80	80	1000804	0	0
10805	1	1	80	80	80	1000805	0	0
set autocommit=0;
Claim 5 jobs in queue 81
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=81 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=81, updated=81
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 81 and updated = 81;
id	type	status	owner	queue	updated	created	priority	ephemeral
10811	1	1	81	81	81	1000811	0	0
10812	1	1	81	81	81	1000812	0	0
10813	1	1	81	81	81	1000813	0	0
10814	1	1	81	81	81	1000814	0	0
10815	1	1	81	81	81	1000815	0	0
set autocommit=0;
Claim 5 jobs in queue 82
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=82 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=82, updated=82
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 82 and updated = 82;
id	type	status	owner	queue	updated	created	priority	ephemeral
10821	1	1	82	82	82	1000821	0	0
10822	1	1	82	82	82	1000822	0	0
10823	1	1	82	82	82	1000823	0	0
10824	1	1	82	82	82	1000824	0	0
10825	1	1	82	82	82	1000825	0	0
set autocommit=0;
Claim 5 jobs in queue 83
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=83 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=83, updated=83
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 83 and updated = 83;
id	type	status	owner	queue	updated	created	priority	ephemeral
10831	1	1	83	83	83	1000831	0	0
10832	1	1	83	83	83	1000832	0	0
10833	1	1	83	83	83	1000833	0	0
10834	1	1	83	83	83	1000834	0	0
10835	1	1	83	83	83	1000835	0	0
set autocommit=0;
Claim 5 jobs in queue 84
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=84 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=84, updated=84
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 84 and updated = 84;
id	type	status	owner	queue	updated	created	priority	ephemeral
10841	1	1	84	84	84	1000841	0	0
10842	1	1	84	84	84	1000842	0	0
10843	1	1	84	84	84	1000843	0	0
10844	1	1	84	84	84	1000844	0	0
10845	1	1	84	84	84	1000845	0	0
set autocommit=0;
Claim 5 jobs in queue 85
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=85 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=85, updated=85
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 85 and updated = 85;
id	type	status	owner	queue	updated	created	priority	ephemeral
10851	1	1	85	85	85	1000851	0	0
10852	1	1	85	85	85	1000852	0	0
10853	1	1	85	85	85	1000853	0	0
10854	1	1	85	85	85	1000854	0	0
10855	1	1	85	85	85	1000855	0	0
set autocommit=0;
Claim 5 jobs in queue 86
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=86 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=86, updated=86
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 86 and updated = 86;
id	type	status	owner	queue	updated	created	priority	ephemeral
10861	1	1	86	86	86	1000861	0	0
10862	1	1	86	86	86	1000862	0	0
10863	1	1	86	86	86	1000863	0	0
10864	1	1	86	86	86	1000864	0	0
10865	1	1	86	86	86	1000865	0	0
set autocommit=0;
Claim 5 jobs in queue 87
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=87 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=87, updated=87
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 87 and updated = 87;
id	type	status	owner	queue	updated	created	priority	ephemeral
10871	1	1	87	87	87	1000871	0	0
10872	1	1	87	87	87	1000872	0	0
10873	1	1	87	87	87	1000873	0	0
10874	1	1	87	87	87	1000874	0	0
10875	1	1	87	87	87	1000875	0	0
set autocommit=0;
Claim 5 jobs in queue 88
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=88 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=88, updated=88
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 88 and updated = 88;
id	type	status	owner	queue	updated	created	priority	ephemeral
10881	1	1	88	88	88	1000881	0	0
10882	1	1	88	88	88	1000882	0	0
10883	1	1	88	88	88	1000883	0	0
10884	1	1	88	88	88	1000884	0	0
10885	1	1	88	88	88	1000885	0	0
set autocommit=0;
Claim 5 jobs in queue 89
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=89 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=89, updated=89
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 89 and updated = 89;
id	type	status	owner	queue	updated	created	priority	ephemeral
10891	1	1	89	89	89	1000891	0	0
10892	1	1	89	89	89	1000892	0	0
10893	1	1	89	89	89	1000893	0	0
10894	1	1	89	89	89	1000894	0	0
10895	1	1	89	89	89	1000895	0	0
set autocommit=0;
Claim 5 jobs in queue 90
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=90 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=90, updated=90
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 90 and updated = 90;
id	type	status	owner	queue	updated	created	priority	ephemeral
10901	1	1	90	90	90	1000901	0	0
10902	1	1	90	90	90	1000902	0	0
10903	1	1	90	90	90	1000903	0	0
10904	1	1	90	90	90	1000904	0	0
10905	1	1	90	90	90	1000905	0	0
set autocommit=0;
Claim 5 jobs in queue 91
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=91 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=91, updated=91
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 91 and updated = 91;
id	type	status	owner	queue	updated	created	priority	ephemeral
10911	1	1	91	91	91	1000911	0	0
10912	1	1	91	91	91	1000912	0	0
10913	1	1	91	91	91	1000913	0	0
10914	1	1	91	91	91	1000914	0	0
10915	1	1	91	91	91	1000915	0	0
set autocommit=0;
Claim 5 jobs in queue 92
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=92 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=92, updated=92
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 92 and updated = 92;
id	type	status	owner	queue	updated	created	priority	ephemeral
10921	1	1	92	92	92	1000921	0	0
10922	1	1	92	92	92	1000922	0	0
10923	1	1	92	92	92	1000923	0	0
10924	1	1	92	92	92	1000924	0	0
10925	1	1	92	92	92	1000925	0	0
set autocommit=0;
Claim 5 jobs in queue 93
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=93 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=93, updated=93
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 93 and updated = 93;
id	type	status	owner	queue	updated	created	priority	ephemeral
10931	1	1	93	93	93	1000931	0	0
10932	1	1	93	93	93	1000932	0	0
10933	1	1	93	93	93	1000933	0	0
10934	1	1	93	93	93	1000934	0	0
10935	1	1	93	93	93	1000935	0	0
set autocommit=0;
Claim 5 jobs in queue 94
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=94 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=94, updated=94
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 94 and updated = 94;
id	type	status	owner	queue	updated	created	priority	ephemeral
10941	1	1	94	94	94	1000941	0	0
10942	1	1	94	94	94	1000942	0	0
10943	1	1	94	94	94	1000943	0	0
10944	1	1	94	94	94	1000944	0	0
10945	1	1	94	94	94	1000945	0	0
set autocommit=0;
Claim 5 jobs in queue 95
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=95 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=95, updated=95
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 95 and updated = 95;
id	type	status	owner	queue	updated	created	priority	ephemeral
10951	1	1	95	95	95	1000951	0	0
10952	1	1	95	95	95	1000952	0	0
10953	1	1	95	95	95	1000953	0	0
10954	1	1	95	95	95	1000954	0	0
10955	1	1	95	95	95	1000955	0	0
set autocommit=0;
Claim 5 jobs in queue 96
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=96 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=96, updated=96
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 96 and updated = 96;
id	type	status	owner	queue	updated	created	priority	ephemeral
10961	1	1	96	96	96	1000961	0	0
10962	1	1	96	96	96	1000962	0	0
10963	1	1	96	96	96	1000963	0	0
10964	1	1	96	96	96	1000964	0	0
10965	1	1	96	96	96	1000965	0	0
set autocommit=0;
Claim 5 jobs in queue 97
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=97 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=97, updated=97
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 97 and updated = 97;
id	type	status	owner	queue	updated	created	priority	ephemeral
10971	1	1	97	97	97	1000971	0	0
10972	1	1	97	97	97	1000972	0	0
10973	1	1	97	97	97	1000973	0	0
10974	1	1	97	97	97	1000974	0	0
10975	1	1	97	97	97	1000975	0	0
set autocommit=0;
Claim 5 jobs in queue 98
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=98 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=98, updated=98
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 98 and updated = 98;
id	type	status	owner	queue	updated	created	priority	ephemeral
10981	1	1	98	98	98	1000981	0	0
10982	1	1	98	98	98	1000982	0	0
10983	1	1	98	98	98	1000983	0	0
10984	1	1	98	98	98	1000984	0	0
10985	1	1	98	98	98	1000985	0	0
set autocommit=0;
Claim 5 jobs in queue 99
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=99 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=99, updated=99
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 99 and updated = 99;
id	type	status	owner	queue	updated	created	priority	ephemeral
10991	1	1	99	99	99	1000991	0	0
10992	1	1	99	99	99	1000992	0	0
10993	1	1	99	99	99	1000993	0	0
10994	1	1	99	99	99	1000994	0	0
10995	1	1	99	99	99	1000995	0	0
set autocommit=0;
Claim 5 jobs in queue 100
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=100 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created ASC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=100, updated=100
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 100 and updated = 100;
id	type	status	owner	queue	updated	created	priority	ephemeral
11001	1	1	100	100	100	1001001	0	0
11002	1	1	100	100	100	1001002	0	0
11003	1	1	100	100	100	1001003	0	0
11004	1	1	100	100	100	1001004	0	0
11005	1	1	100	100	100	1001005	0	0
Restore the original data for table job2_index
UPDATE job2_index SET owner=NULL, updated=0 WHERE owner IS NOT NULL;
set autocommit=0;
Claim 5 jobs in queue 1
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=1 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1001, updated=1001
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1001 and updated = 1001;
id	type	status	owner	queue	updated	created	priority	ephemeral
10016	1	1	1001	1	1001	1000016	0	0
10017	1	1	1001	1	1001	1000017	0	0
10018	1	1	1001	1	1001	1000018	0	0
10019	1	1	1001	1	1001	1000019	0	0
10020	1	1	1001	1	1001	1000020	0	0
set autocommit=0;
Claim 5 jobs in queue 3
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=3 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1002, updated=1002
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1002 and updated = 1002;
id	type	status	owner	queue	updated	created	priority	ephemeral
10036	1	1	1002	3	1002	1000036	0	0
10037	1	1	1002	3	1002	1000037	0	0
10038	1	1	1002	3	1002	1000038	0	0
10039	1	1	1002	3	1002	1000039	0	0
10040	1	1	1002	3	1002	1000040	0	0
set autocommit=0;
Claim 5 jobs in queue 5
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=5 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1003, updated=1003
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1003 and updated = 1003;
id	type	status	owner	queue	updated	created	priority	ephemeral
10056	1	1	1003	5	1003	1000056	0	0
10057	1	1	1003	5	1003	1000057	0	0
10058	1	1	1003	5	1003	1000058	0	0
10059	1	1	1003	5	1003	1000059	0	0
10060	1	1	1003	5	1003	1000060	0	0
set autocommit=0;
Claim 5 jobs in queue 7
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=7 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1004, updated=1004
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1004 and updated = 1004;
id	type	status	owner	queue	updated	created	priority	ephemeral
10076	1	1	1004	7	1004	1000076	0	0
10077	1	1	1004	7	1004	1000077	0	0
10078	1	1	1004	7	1004	1000078	0	0
10079	1	1	1004	7	1004	1000079	0	0
10080	1	1	1004	7	1004	1000080	0	0
set autocommit=0;
Claim 5 jobs in queue 9
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=9 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1005, updated=1005
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1005 and updated = 1005;
id	type	status	owner	queue	updated	created	priority	ephemeral
10096	1	1	1005	9	1005	1000096	0	0
10097	1	1	1005	9	1005	1000097	0	0
10098	1	1	1005	9	1005	1000098	0	0
10099	1	1	1005	9	1005	1000099	0	0
10100	1	1	1005	9	1005	1000100	0	0
set autocommit=0;
Claim 5 jobs in queue 11
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=11 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1006, updated=1006
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1006 and updated = 1006;
id	type	status	owner	queue	updated	created	priority	ephemeral
10116	1	1	1006	11	1006	1000116	0	0
10117	1	1	1006	11	1006	1000117	0	0
10118	1	1	1006	11	1006	1000118	0	0
10119	1	1	1006	11	1006	1000119	0	0
10120	1	1	1006	11	1006	1000120	0	0
set autocommit=0;
Claim 5 jobs in queue 13
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=13 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1007, updated=1007
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1007 and updated = 1007;
id	type	status	owner	queue	updated	created	priority	ephemeral
10136	1	1	1007	13	1007	1000136	0	0
10137	1	1	1007	13	1007	1000137	0	0
10138	1	1	1007	13	1007	1000138	0	0
10139	1	1	1007	13	1007	1000139	0	0
10140	1	1	1007	13	1007	1000140	0	0
set autocommit=0;
Claim 5 jobs in queue 15
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=15 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1008, updated=1008
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1008 and updated = 1008;
id	type	status	owner	queue	updated	created	priority	ephemeral
10156	1	1	1008	15	1008	1000156	0	0
10157	1	1	1008	15	1008	1000157	0	0
10158	1	1	1008	15	1008	1000158	0	0
10159	1	1	1008	15	1008	1000159	0	0
10160	1	1	1008	15	1008	1000160	0	0
set autocommit=0;
Claim 5 jobs in queue 17
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=17 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1009, updated=1009
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1009 and updated = 1009;
id	type	status	owner	queue	updated	created	priority	ephemeral
10176	1	1	1009	17	1009	1000176	0	0
10177	1	1	1009	17	1009	1000177	0	0
10178	1	1	1009	17	1009	1000178	0	0
10179	1	1	1009	17	1009	1000179	0	0
10180	1	1	1009	17	1009	1000180	0	0
set autocommit=0;
Claim 5 jobs in queue 19
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=19 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1010, updated=1010
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1010 and updated = 1010;
id	type	status	owner	queue	updated	created	priority	ephemeral
10196	1	1	1010	19	1010	1000196	0	0
10197	1	1	1010	19	1010	1000197	0	0
10198	1	1	1010	19	1010	1000198	0	0
10199	1	1	1010	19	1010	1000199	0	0
10200	1	1	1010	19	1010	1000200	0	0
set autocommit=0;
Claim 5 jobs in queue 21
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=21 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1011, updated=1011
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1011 and updated = 1011;
id	type	status	owner	queue	updated	created	priority	ephemeral
10216	1	1	1011	21	1011	1000216	0	0
10217	1	1	1011	21	1011	1000217	0	0
10218	1	1	1011	21	1011	1000218	0	0
10219	1	1	1011	21	1011	1000219	0	0
10220	1	1	1011	21	1011	1000220	0	0
set autocommit=0;
Claim 5 jobs in queue 23
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=23 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1012, updated=1012
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1012 and updated = 1012;
id	type	status	owner	queue	updated	created	priority	ephemeral
10236	1	1	1012	23	1012	1000236	0	0
10237	1	1	1012	23	1012	1000237	0	0
10238	1	1	1012	23	1012	1000238	0	0
10239	1	1	1012	23	1012	1000239	0	0
10240	1	1	1012	23	1012	1000240	0	0
set autocommit=0;
Claim 5 jobs in queue 25
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=25 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1013, updated=1013
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1013 and updated = 1013;
id	type	status	owner	queue	updated	created	priority	ephemeral
10256	1	1	1013	25	1013	1000256	0	0
10257	1	1	1013	25	1013	1000257	0	0
10258	1	1	1013	25	1013	1000258	0	0
10259	1	1	1013	25	1013	1000259	0	0
10260	1	1	1013	25	1013	1000260	0	0
set autocommit=0;
Claim 5 jobs in queue 27
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=27 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1014, updated=1014
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1014 and updated = 1014;
id	type	status	owner	queue	updated	created	priority	ephemeral
10276	1	1	1014	27	1014	1000276	0	0
10277	1	1	1014	27	1014	1000277	0	0
10278	1	1	1014	27	1014	1000278	0	0
10279	1	1	1014	27	1014	1000279	0	0
10280	1	1	1014	27	1014	1000280	0	0
set autocommit=0;
Claim 5 jobs in queue 29
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=29 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1015, updated=1015
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1015 and updated = 1015;
id	type	status	owner	queue	updated	created	priority	ephemeral
10296	1	1	1015	29	1015	1000296	0	0
10297	1	1	1015	29	1015	1000297	0	0
10298	1	1	1015	29	1015	1000298	0	0
10299	1	1	1015	29	1015	1000299	0	0
10300	1	1	1015	29	1015	1000300	0	0
set autocommit=0;
Claim 5 jobs in queue 31
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=31 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1016, updated=1016
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1016 and updated = 1016;
id	type	status	owner	queue	updated	created	priority	ephemeral
10316	1	1	1016	31	1016	1000316	0	0
10317	1	1	1016	31	1016	1000317	0	0
10318	1	1	1016	31	1016	1000318	0	0
10319	1	1	1016	31	1016	1000319	0	0
10320	1	1	1016	31	1016	1000320	0	0
set autocommit=0;
Claim 5 jobs in queue 33
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=33 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1017, updated=1017
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1017 and updated = 1017;
id	type	status	owner	queue	updated	created	priority	ephemeral
10336	1	1	1017	33	1017	1000336	0	0
10337	1	1	1017	33	1017	1000337	0	0
10338	1	1	1017	33	1017	1000338	0	0
10339	1	1	1017	33	1017	1000339	0	0
10340	1	1	1017	33	1017	1000340	0	0
set autocommit=0;
Claim 5 jobs in queue 35
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=35 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1018, updated=1018
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1018 and updated = 1018;
id	type	status	owner	queue	updated	created	priority	ephemeral
10356	1	1	1018	35	1018	1000356	0	0
10357	1	1	1018	35	1018	1000357	0	0
10358	1	1	1018	35	1018	1000358	0	0
10359	1	1	1018	35	1018	1000359	0	0
10360	1	1	1018	35	1018	1000360	0	0
set autocommit=0;
Claim 5 jobs in queue 37
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=37 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1019, updated=1019
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1019 and updated = 1019;
id	type	status	owner	queue	updated	created	priority	ephemeral
10376	1	1	1019	37	1019	1000376	0	0
10377	1	1	1019	37	1019	1000377	0	0
10378	1	1	1019	37	1019	1000378	0	0
10379	1	1	1019	37	1019	1000379	0	0
10380	1	1	1019	37	1019	1000380	0	0
set autocommit=0;
Claim 5 jobs in queue 39
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=39 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1020, updated=1020
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1020 and updated = 1020;
id	type	status	owner	queue	updated	created	priority	ephemeral
10396	1	1	1020	39	1020	1000396	0	0
10397	1	1	1020	39	1020	1000397	0	0
10398	1	1	1020	39	1020	1000398	0	0
10399	1	1	1020	39	1020	1000399	0	0
10400	1	1	1020	39	1020	1000400	0	0
set autocommit=0;
Claim 5 jobs in queue 41
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=41 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1021, updated=1021
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1021 and updated = 1021;
id	type	status	owner	queue	updated	created	priority	ephemeral
10416	1	1	1021	41	1021	1000416	0	0
10417	1	1	1021	41	1021	1000417	0	0
10418	1	1	1021	41	1021	1000418	0	0
10419	1	1	1021	41	1021	1000419	0	0
10420	1	1	1021	41	1021	1000420	0	0
set autocommit=0;
Claim 5 jobs in queue 43
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=43 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1022, updated=1022
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1022 and updated = 1022;
id	type	status	owner	queue	updated	created	priority	ephemeral
10436	1	1	1022	43	1022	1000436	0	0
10437	1	1	1022	43	1022	1000437	0	0
10438	1	1	1022	43	1022	1000438	0	0
10439	1	1	1022	43	1022	1000439	0	0
10440	1	1	1022	43	1022	1000440	0	0
set autocommit=0;
Claim 5 jobs in queue 45
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=45 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1023, updated=1023
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1023 and updated = 1023;
id	type	status	owner	queue	updated	created	priority	ephemeral
10456	1	1	1023	45	1023	1000456	0	0
10457	1	1	1023	45	1023	1000457	0	0
10458	1	1	1023	45	1023	1000458	0	0
10459	1	1	1023	45	1023	1000459	0	0
10460	1	1	1023	45	1023	1000460	0	0
set autocommit=0;
Claim 5 jobs in queue 47
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=47 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1024, updated=1024
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1024 and updated = 1024;
id	type	status	owner	queue	updated	created	priority	ephemeral
10476	1	1	1024	47	1024	1000476	0	0
10477	1	1	1024	47	1024	1000477	0	0
10478	1	1	1024	47	1024	1000478	0	0
10479	1	1	1024	47	1024	1000479	0	0
10480	1	1	1024	47	1024	1000480	0	0
set autocommit=0;
Claim 5 jobs in queue 49
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=49 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1025, updated=1025
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1025 and updated = 1025;
id	type	status	owner	queue	updated	created	priority	ephemeral
10496	1	1	1025	49	1025	1000496	0	0
10497	1	1	1025	49	1025	1000497	0	0
10498	1	1	1025	49	1025	1000498	0	0
10499	1	1	1025	49	1025	1000499	0	0
10500	1	1	1025	49	1025	1000500	0	0
set autocommit=0;
Claim 5 jobs in queue 51
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=51 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1026, updated=1026
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1026 and updated = 1026;
id	type	status	owner	queue	updated	created	priority	ephemeral
10516	1	1	1026	51	1026	1000516	0	0
10517	1	1	1026	51	1026	1000517	0	0
10518	1	1	1026	51	1026	1000518	0	0
10519	1	1	1026	51	1026	1000519	0	0
10520	1	1	1026	51	1026	1000520	0	0
set autocommit=0;
Claim 5 jobs in queue 53
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=53 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1027, updated=1027
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1027 and updated = 1027;
id	type	status	owner	queue	updated	created	priority	ephemeral
10536	1	1	1027	53	1027	1000536	0	0
10537	1	1	1027	53	1027	1000537	0	0
10538	1	1	1027	53	1027	1000538	0	0
10539	1	1	1027	53	1027	1000539	0	0
10540	1	1	1027	53	1027	1000540	0	0
set autocommit=0;
Claim 5 jobs in queue 55
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=55 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1028, updated=1028
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1028 and updated = 1028;
id	type	status	owner	queue	updated	created	priority	ephemeral
10556	1	1	1028	55	1028	1000556	0	0
10557	1	1	1028	55	1028	1000557	0	0
10558	1	1	1028	55	1028	1000558	0	0
10559	1	1	1028	55	1028	1000559	0	0
10560	1	1	1028	55	1028	1000560	0	0
set autocommit=0;
Claim 5 jobs in queue 57
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=57 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1029, updated=1029
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1029 and updated = 1029;
id	type	status	owner	queue	updated	created	priority	ephemeral
10576	1	1	1029	57	1029	1000576	0	0
10577	1	1	1029	57	1029	1000577	0	0
10578	1	1	1029	57	1029	1000578	0	0
10579	1	1	1029	57	1029	1000579	0	0
10580	1	1	1029	57	1029	1000580	0	0
set autocommit=0;
Claim 5 jobs in queue 59
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=59 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1030, updated=1030
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1030 and updated = 1030;
id	type	status	owner	queue	updated	created	priority	ephemeral
10596	1	1	1030	59	1030	1000596	0	0
10597	1	1	1030	59	1030	1000597	0	0
10598	1	1	1030	59	1030	1000598	0	0
10599	1	1	1030	59	1030	1000599	0	0
10600	1	1	1030	59	1030	1000600	0	0
set autocommit=0;
Claim 5 jobs in queue 61
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=61 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1031, updated=1031
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1031 and updated = 1031;
id	type	status	owner	queue	updated	created	priority	ephemeral
10616	1	1	1031	61	1031	1000616	0	0
10617	1	1	1031	61	1031	1000617	0	0
10618	1	1	1031	61	1031	1000618	0	0
10619	1	1	1031	61	1031	1000619	0	0
10620	1	1	1031	61	1031	1000620	0	0
set autocommit=0;
Claim 5 jobs in queue 63
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=63 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1032, updated=1032
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1032 and updated = 1032;
id	type	status	owner	queue	updated	created	priority	ephemeral
10636	1	1	1032	63	1032	1000636	0	0
10637	1	1	1032	63	1032	1000637	0	0
10638	1	1	1032	63	1032	1000638	0	0
10639	1	1	1032	63	1032	1000639	0	0
10640	1	1	1032	63	1032	1000640	0	0
set autocommit=0;
Claim 5 jobs in queue 65
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=65 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1033, updated=1033
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1033 and updated = 1033;
id	type	status	owner	queue	updated	created	priority	ephemeral
10656	1	1	1033	65	1033	1000656	0	0
10657	1	1	1033	65	1033	1000657	0	0
10658	1	1	1033	65	1033	1000658	0	0
10659	1	1	1033	65	1033	1000659	0	0
10660	1	1	1033	65	1033	1000660	0	0
set autocommit=0;
Claim 5 jobs in queue 67
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=67 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1034, updated=1034
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1034 and updated = 1034;
id	type	status	owner	queue	updated	created	priority	ephemeral
10676	1	1	1034	67	1034	1000676	0	0
10677	1	1	1034	67	1034	1000677	0	0
10678	1	1	1034	67	1034	1000678	0	0
10679	1	1	1034	67	1034	1000679	0	0
10680	1	1	1034	67	1034	1000680	0	0
set autocommit=0;
Claim 5 jobs in queue 69
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=69 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1035, updated=1035
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1035 and updated = 1035;
id	type	status	owner	queue	updated	created	priority	ephemeral
10696	1	1	1035	69	1035	1000696	0	0
10697	1	1	1035	69	1035	1000697	0	0
10698	1	1	1035	69	1035	1000698	0	0
10699	1	1	1035	69	1035	1000699	0	0
10700	1	1	1035	69	1035	1000700	0	0
set autocommit=0;
Claim 5 jobs in queue 71
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=71 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1036, updated=1036
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1036 and updated = 1036;
id	type	status	owner	queue	updated	created	priority	ephemeral
10716	1	1	1036	71	1036	1000716	0	0
10717	1	1	1036	71	1036	1000717	0	0
10718	1	1	1036	71	1036	1000718	0	0
10719	1	1	1036	71	1036	1000719	0	0
10720	1	1	1036	71	1036	1000720	0	0
set autocommit=0;
Claim 5 jobs in queue 73
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=73 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1037, updated=1037
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1037 and updated = 1037;
id	type	status	owner	queue	updated	created	priority	ephemeral
10736	1	1	1037	73	1037	1000736	0	0
10737	1	1	1037	73	1037	1000737	0	0
10738	1	1	1037	73	1037	1000738	0	0
10739	1	1	1037	73	1037	1000739	0	0
10740	1	1	1037	73	1037	1000740	0	0
set autocommit=0;
Claim 5 jobs in queue 75
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=75 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1038, updated=1038
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1038 and updated = 1038;
id	type	status	owner	queue	updated	created	priority	ephemeral
10756	1	1	1038	75	1038	1000756	0	0
10757	1	1	1038	75	1038	1000757	0	0
10758	1	1	1038	75	1038	1000758	0	0
10759	1	1	1038	75	1038	1000759	0	0
10760	1	1	1038	75	1038	1000760	0	0
set autocommit=0;
Claim 5 jobs in queue 77
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=77 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1039, updated=1039
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1039 and updated = 1039;
id	type	status	owner	queue	updated	created	priority	ephemeral
10776	1	1	1039	77	1039	1000776	0	0
10777	1	1	1039	77	1039	1000777	0	0
10778	1	1	1039	77	1039	1000778	0	0
10779	1	1	1039	77	1039	1000779	0	0
10780	1	1	1039	77	1039	1000780	0	0
set autocommit=0;
Claim 5 jobs in queue 79
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=79 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1040, updated=1040
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1040 and updated = 1040;
id	type	status	owner	queue	updated	created	priority	ephemeral
10796	1	1	1040	79	1040	1000796	0	0
10797	1	1	1040	79	1040	1000797	0	0
10798	1	1	1040	79	1040	1000798	0	0
10799	1	1	1040	79	1040	1000799	0	0
10800	1	1	1040	79	1040	1000800	0	0
set autocommit=0;
Claim 5 jobs in queue 81
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=81 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1041, updated=1041
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1041 and updated = 1041;
id	type	status	owner	queue	updated	created	priority	ephemeral
10816	1	1	1041	81	1041	1000816	0	0
10817	1	1	1041	81	1041	1000817	0	0
10818	1	1	1041	81	1041	1000818	0	0
10819	1	1	1041	81	1041	1000819	0	0
10820	1	1	1041	81	1041	1000820	0	0
set autocommit=0;
Claim 5 jobs in queue 83
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=83 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1042, updated=1042
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1042 and updated = 1042;
id	type	status	owner	queue	updated	created	priority	ephemeral
10836	1	1	1042	83	1042	1000836	0	0
10837	1	1	1042	83	1042	1000837	0	0
10838	1	1	1042	83	1042	1000838	0	0
10839	1	1	1042	83	1042	1000839	0	0
10840	1	1	1042	83	1042	1000840	0	0
set autocommit=0;
Claim 5 jobs in queue 85
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=85 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1043, updated=1043
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1043 and updated = 1043;
id	type	status	owner	queue	updated	created	priority	ephemeral
10856	1	1	1043	85	1043	1000856	0	0
10857	1	1	1043	85	1043	1000857	0	0
10858	1	1	1043	85	1043	1000858	0	0
10859	1	1	1043	85	1043	1000859	0	0
10860	1	1	1043	85	1043	1000860	0	0
set autocommit=0;
Claim 5 jobs in queue 87
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=87 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1044, updated=1044
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1044 and updated = 1044;
id	type	status	owner	queue	updated	created	priority	ephemeral
10876	1	1	1044	87	1044	1000876	0	0
10877	1	1	1044	87	1044	1000877	0	0
10878	1	1	1044	87	1044	1000878	0	0
10879	1	1	1044	87	1044	1000879	0	0
10880	1	1	1044	87	1044	1000880	0	0
set autocommit=0;
Claim 5 jobs in queue 89
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=89 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1045, updated=1045
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1045 and updated = 1045;
id	type	status	owner	queue	updated	created	priority	ephemeral
10896	1	1	1045	89	1045	1000896	0	0
10897	1	1	1045	89	1045	1000897	0	0
10898	1	1	1045	89	1045	1000898	0	0
10899	1	1	1045	89	1045	1000899	0	0
10900	1	1	1045	89	1045	1000900	0	0
set autocommit=0;
Claim 5 jobs in queue 91
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=91 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1046, updated=1046
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1046 and updated = 1046;
id	type	status	owner	queue	updated	created	priority	ephemeral
10916	1	1	1046	91	1046	1000916	0	0
10917	1	1	1046	91	1046	1000917	0	0
10918	1	1	1046	91	1046	1000918	0	0
10919	1	1	1046	91	1046	1000919	0	0
10920	1	1	1046	91	1046	1000920	0	0
set autocommit=0;
Claim 5 jobs in queue 93
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=93 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1047, updated=1047
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1047 and updated = 1047;
id	type	status	owner	queue	updated	created	priority	ephemeral
10936	1	1	1047	93	1047	1000936	0	0
10937	1	1	1047	93	1047	1000937	0	0
10938	1	1	1047	93	1047	1000938	0	0
10939	1	1	1047	93	1047	1000939	0	0
10940	1	1	1047	93	1047	1000940	0	0
set autocommit=0;
Claim 5 jobs in queue 95
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=95 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1048, updated=1048
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1048 and updated = 1048;
id	type	status	owner	queue	updated	created	priority	ephemeral
10956	1	1	1048	95	1048	1000956	0	0
10957	1	1	1048	95	1048	1000957	0	0
10958	1	1	1048	95	1048	1000958	0	0
10959	1	1	1048	95	1048	1000959	0	0
10960	1	1	1048	95	1048	1000960	0	0
set autocommit=0;
Claim 5 jobs in queue 97
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=97 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1049, updated=1049
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1049 and updated = 1049;
id	type	status	owner	queue	updated	created	priority	ephemeral
10976	1	1	1049	97	1049	1000976	0	0
10977	1	1	1049	97	1049	1000977	0	0
10978	1	1	1049	97	1049	1000978	0	0
10979	1	1	1049	97	1049	1000979	0	0
10980	1	1	1049	97	1049	1000980	0	0
set autocommit=0;
Claim 5 jobs in queue 99
UPDATE job2_index, (SELECT id FROM job2_index
WHERE queue=99 AND status IN (1) AND owner IS NULL
ORDER BY priority ASC, created DESC
LIMIT 5 FOR UPDATE SKIP LOCKED) unassigned_jobs
SET owner=1050, updated=1050
WHERE job2_index.id=unassigned_jobs.id;
select * from job2_index where owner = 1050 and updated = 1050;
id	type	status	owner	queue	updated	created	priority	ephemeral
10996	1	1	1050	99	1050	1000996	0	0
10997	1	1	1050	99	1050	1000997	0	0
10998	1	1	1050	99	1050	1000998	0	0
10999	1	1	1050	99	1050	1000999	0	0
11000	1	1	1050	99	1050	1001000	0	0
drop table job2_index, job2_to_reviewer;
#########################################################################
###
### (11) Job queue 3 : job3 and job3_attempt
###
#########################################################################
CREATE TABLE `job3` (
`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
`parent_id` bigint(20) unsigned DEFAULT NULL,
`creator_id` bigint(20) unsigned NOT NULL,
`create_time` double NOT NULL,
`update_time` double NOT NULL,
`start_time` double DEFAULT NULL,
`end_time` double DEFAULT NULL,
`wall_time` double NOT NULL,
`num_attempts` int(10) unsigned NOT NULL,
`priority` int(10) unsigned NOT NULL,
`state` int(10) unsigned DEFAULT NULL,
`region` int(10) unsigned DEFAULT NULL,
`segment` int(10) unsigned NOT NULL,
`worker_guid` bigint(20) unsigned DEFAULT NULL,
`handler_id` bigint(20) unsigned NOT NULL,
`cur_attempt_id` bigint(20) DEFAULT NULL,
PRIMARY KEY (`id`,`create_time`),
KEY `parent_id_idx` (`parent_id`),
KEY `recent_update_idx` (`update_time`,`handler_id`,`state`),
KEY `creator_id_idx` (`creator_id`),
KEY `handler_id_idx` (`handler_id`),
KEY `queue_feeder_idx` (`state`,`worker_guid`,`handler_id`,`segment`,`priority`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
CREATE TABLE `job3_attempt` (
`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
`job_id` bigint(20) unsigned NOT NULL,
`start_time` double DEFAULT NULL,
`next_run_time` double NOT NULL,
`end_time` double DEFAULT NULL,
`wall_time` double NOT NULL,
`last_heartbeat_time` double DEFAULT NULL,
`start_job_stage` varchar(128) NOT NULL,
`end_job_stage` varchar(128) DEFAULT NULL,
`worker_guid` bigint(20) unsigned DEFAULT NULL,
PRIMARY KEY (`id`),
KEY `job_id_idx` (`job_id`),
KEY `end_time_idx` (`end_time`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
Connection c1: claim 5 jobs from state 1
set autocommit=0;
explain extended
SELECT job3.id AS job_id, job3_attempt.id AS job_attempt_id
FROM job3, job3_attempt
WHERE job3.state = 1 AND job3_attempt.id = job3.cur_attempt_id AND job3_attempt.next_run_time < 2000000 LIMIT 5 FOR UPDATE SKIP LOCKED;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	job3	ref	queue_feeder_idx	queue_feeder_idx	5	const	499	100.00	Using where
1	SIMPLE	job3_attempt	eq_ref	PRIMARY	PRIMARY	8	test.job3.cur_attempt_id	1	100.00	Using where
Warnings:
Note	1003	/* select#1 */ select `test`.`job3`.`id` AS `job_id`,`test`.`job3_attempt`.`id` AS `job_attempt_id` from `test`.`job3` join `test`.`job3_attempt` where ((`test`.`job3`.`state` = 1) and (`test`.`job3_attempt`.`id` = `test`.`job3`.`cur_attempt_id`) and (`test`.`job3_attempt`.`next_run_time` < 2000000)) limit 5
SELECT job3.id AS job_id, job3_attempt.id AS job_attempt_id
FROM job3, job3_attempt
WHERE job3.state = 1 AND job3_attempt.id = job3.cur_attempt_id AND job3_attempt.next_run_time < 2000000 LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_attempt_id
10501	50501
10502	50502
10503	50503
10504	50504
10505	50505
explain extended
UPDATE job3 SET state=NULL, worker_guid=NULL WHERE job3.id IN (10501, 10502, 10503, 10504, 10505);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	job3	range	PRIMARY	PRIMARY	8	const	5	100.00	Using where
UPDATE job3 SET state=NULL, worker_guid=NULL WHERE job3.id IN (10501, 10502, 10503, 10504, 10505);
explain extended
UPDATE job3_attempt SET worker_guid=NULL WHERE job3_attempt.id IN (10501, 10502, 10503, 10504, 10505);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	job3_attempt	range	PRIMARY	PRIMARY	8	const	5	100.00	Using where
UPDATE job3_attempt SET worker_guid=NULL WHERE job3_attempt.id IN (10501, 10502, 10503, 10504, 10505);
Connection c2: claim 5 jobs from state 1
set autocommit=0;
SELECT job3.id AS job_id, job3_attempt.id AS job_attempt_id
FROM job3, job3_attempt
WHERE job3.state = 1 AND job3_attempt.id = job3.cur_attempt_id AND job3_attempt.next_run_time < 2000000 LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_attempt_id
10506	50506
10507	50507
10508	50508
10509	50509
10510	50510
UPDATE job3 SET state=NULL, worker_guid=NULL WHERE job3.id IN (10506, 10507, 10508, 10509, 10510);
UPDATE job3_attempt SET worker_guid=NULL WHERE job3_attempt.id IN (10506, 10507, 10508, 10509, 10510);
Connection c3: claim 5 jobs from state 1
set autocommit=0;
SELECT job3.id AS job_id, job3_attempt.id AS job_attempt_id
FROM job3, job3_attempt
WHERE job3.state = 1 AND job3_attempt.id = job3.cur_attempt_id AND job3_attempt.next_run_time < 2000000 LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_attempt_id
10511	50511
10512	50512
10513	50513
10514	50514
10515	50515
UPDATE job3 SET state=NULL, worker_guid=NULL WHERE job3.id IN (10511, 10512, 10513, 10514, 10515);
UPDATE job3_attempt SET worker_guid=NULL WHERE job3_attempt.id IN (10511, 10512, 10513, 10514, 10515);
Connection c4: claim 5 jobs from state 1
set autocommit=0;
SELECT job3.id AS job_id, job3_attempt.id AS job_attempt_id
FROM job3, job3_attempt
WHERE job3.state = 1 AND job3_attempt.id = job3.cur_attempt_id AND job3_attempt.next_run_time < 2000000 LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_attempt_id
10516	50516
10517	50517
10518	50518
10519	50519
10520	50520
UPDATE job3 SET state=NULL, worker_guid=NULL WHERE job3.id IN (10516, 10517, 10518, 10519, 10520);
UPDATE job3_attempt SET worker_guid=NULL WHERE job3_attempt.id IN (10516, 10517, 10518, 10519, 10520);
Connection c5: claim 5 jobs from state 1
set autocommit=0;
SELECT job3.id AS job_id, job3_attempt.id AS job_attempt_id
FROM job3, job3_attempt
WHERE job3.state = 1 AND job3_attempt.id = job3.cur_attempt_id AND job3_attempt.next_run_time < 2000000 LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_attempt_id
10521	50521
10522	50522
10523	50523
10524	50524
10525	50525
UPDATE job3 SET state=NULL, worker_guid=NULL WHERE job3.id IN (10521, 10522, 10523, 10524, 10525);
UPDATE job3_attempt SET worker_guid=NULL WHERE job3_attempt.id IN (10521, 10522, 10523, 10524, 10525);
set autocommit=0;
Connection c6: claim 5 jobs WHERE job3.id IN (10001, 11001, 12001, 13001) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10001, 11001, 12001, 13001) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10001	50001
12001	52001
set autocommit=0;
Connection c7: claim 5 jobs WHERE job3.id IN (10002, 11002, 12002, 13002) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10002, 11002, 12002, 13002) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c8: claim 5 jobs WHERE job3.id IN (10003, 11003, 12003, 13003) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10003, 11003, 12003, 13003) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11003	51003
13003	53003
set autocommit=0;
Connection c9: claim 5 jobs WHERE job3.id IN (10004, 11004, 12004, 13004) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10004, 11004, 12004, 13004) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c10: claim 5 jobs WHERE job3.id IN (10005, 11005, 12005, 13005) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10005, 11005, 12005, 13005) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10005	50005
12005	52005
set autocommit=0;
Connection c11: claim 5 jobs WHERE job3.id IN (10006, 11006, 12006, 13006) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10006, 11006, 12006, 13006) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c12: claim 5 jobs WHERE job3.id IN (10007, 11007, 12007, 13007) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10007, 11007, 12007, 13007) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11007	51007
13007	53007
set autocommit=0;
Connection c13: claim 5 jobs WHERE job3.id IN (10008, 11008, 12008, 13008) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10008, 11008, 12008, 13008) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c14: claim 5 jobs WHERE job3.id IN (10009, 11009, 12009, 13009) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10009, 11009, 12009, 13009) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10009	50009
12009	52009
set autocommit=0;
Connection c15: claim 5 jobs WHERE job3.id IN (10010, 11010, 12010, 13010) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10010, 11010, 12010, 13010) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c16: claim 5 jobs WHERE job3.id IN (10011, 11011, 12011, 13011) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10011, 11011, 12011, 13011) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11011	51011
13011	53011
set autocommit=0;
Connection c17: claim 5 jobs WHERE job3.id IN (10012, 11012, 12012, 13012) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10012, 11012, 12012, 13012) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c18: claim 5 jobs WHERE job3.id IN (10013, 11013, 12013, 13013) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10013, 11013, 12013, 13013) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10013	50013
12013	52013
set autocommit=0;
Connection c19: claim 5 jobs WHERE job3.id IN (10014, 11014, 12014, 13014) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10014, 11014, 12014, 13014) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c20: claim 5 jobs WHERE job3.id IN (10015, 11015, 12015, 13015) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10015, 11015, 12015, 13015) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11015	51015
13015	53015
set autocommit=0;
Connection c21: claim 5 jobs WHERE job3.id IN (10016, 11016, 12016, 13016) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10016, 11016, 12016, 13016) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c22: claim 5 jobs WHERE job3.id IN (10017, 11017, 12017, 13017) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10017, 11017, 12017, 13017) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10017	50017
12017	52017
set autocommit=0;
Connection c23: claim 5 jobs WHERE job3.id IN (10018, 11018, 12018, 13018) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10018, 11018, 12018, 13018) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c24: claim 5 jobs WHERE job3.id IN (10019, 11019, 12019, 13019) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10019, 11019, 12019, 13019) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11019	51019
13019	53019
set autocommit=0;
Connection c25: claim 5 jobs WHERE job3.id IN (10020, 11020, 12020, 13020) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10020, 11020, 12020, 13020) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c26: claim 5 jobs WHERE job3.id IN (10021, 11021, 12021, 13021) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10021, 11021, 12021, 13021) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10021	50021
12021	52021
set autocommit=0;
Connection c27: claim 5 jobs WHERE job3.id IN (10022, 11022, 12022, 13022) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10022, 11022, 12022, 13022) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c28: claim 5 jobs WHERE job3.id IN (10023, 11023, 12023, 13023) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10023, 11023, 12023, 13023) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11023	51023
13023	53023
set autocommit=0;
Connection c29: claim 5 jobs WHERE job3.id IN (10024, 11024, 12024, 13024) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10024, 11024, 12024, 13024) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c30: claim 5 jobs WHERE job3.id IN (10025, 11025, 12025, 13025) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10025, 11025, 12025, 13025) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10025	50025
12025	52025
set autocommit=0;
Connection c31: claim 5 jobs WHERE job3.id IN (10026, 11026, 12026, 13026) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10026, 11026, 12026, 13026) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c32: claim 5 jobs WHERE job3.id IN (10027, 11027, 12027, 13027) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10027, 11027, 12027, 13027) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11027	51027
13027	53027
set autocommit=0;
Connection c33: claim 5 jobs WHERE job3.id IN (10028, 11028, 12028, 13028) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10028, 11028, 12028, 13028) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c34: claim 5 jobs WHERE job3.id IN (10029, 11029, 12029, 13029) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10029, 11029, 12029, 13029) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10029	50029
12029	52029
set autocommit=0;
Connection c35: claim 5 jobs WHERE job3.id IN (10030, 11030, 12030, 13030) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10030, 11030, 12030, 13030) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c36: claim 5 jobs WHERE job3.id IN (10031, 11031, 12031, 13031) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10031, 11031, 12031, 13031) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11031	51031
13031	53031
set autocommit=0;
Connection c37: claim 5 jobs WHERE job3.id IN (10032, 11032, 12032, 13032) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10032, 11032, 12032, 13032) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c38: claim 5 jobs WHERE job3.id IN (10033, 11033, 12033, 13033) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10033, 11033, 12033, 13033) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10033	50033
12033	52033
set autocommit=0;
Connection c39: claim 5 jobs WHERE job3.id IN (10034, 11034, 12034, 13034) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10034, 11034, 12034, 13034) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c40: claim 5 jobs WHERE job3.id IN (10035, 11035, 12035, 13035) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10035, 11035, 12035, 13035) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11035	51035
13035	53035
set autocommit=0;
Connection c41: claim 5 jobs WHERE job3.id IN (10036, 11036, 12036, 13036) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10036, 11036, 12036, 13036) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c42: claim 5 jobs WHERE job3.id IN (10037, 11037, 12037, 13037) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10037, 11037, 12037, 13037) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10037	50037
12037	52037
set autocommit=0;
Connection c43: claim 5 jobs WHERE job3.id IN (10038, 11038, 12038, 13038) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10038, 11038, 12038, 13038) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c44: claim 5 jobs WHERE job3.id IN (10039, 11039, 12039, 13039) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10039, 11039, 12039, 13039) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11039	51039
13039	53039
set autocommit=0;
Connection c45: claim 5 jobs WHERE job3.id IN (10040, 11040, 12040, 13040) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10040, 11040, 12040, 13040) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c46: claim 5 jobs WHERE job3.id IN (10041, 11041, 12041, 13041) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10041, 11041, 12041, 13041) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10041	50041
12041	52041
set autocommit=0;
Connection c47: claim 5 jobs WHERE job3.id IN (10042, 11042, 12042, 13042) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10042, 11042, 12042, 13042) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c48: claim 5 jobs WHERE job3.id IN (10043, 11043, 12043, 13043) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10043, 11043, 12043, 13043) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11043	51043
13043	53043
set autocommit=0;
Connection c49: claim 5 jobs WHERE job3.id IN (10044, 11044, 12044, 13044) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10044, 11044, 12044, 13044) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c50: claim 5 jobs WHERE job3.id IN (10045, 11045, 12045, 13045) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10045, 11045, 12045, 13045) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10045	50045
12045	52045
set autocommit=0;
Connection c51: claim 5 jobs WHERE job3.id IN (10046, 11046, 12046, 13046) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10046, 11046, 12046, 13046) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c52: claim 5 jobs WHERE job3.id IN (10047, 11047, 12047, 13047) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10047, 11047, 12047, 13047) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11047	51047
13047	53047
set autocommit=0;
Connection c53: claim 5 jobs WHERE job3.id IN (10048, 11048, 12048, 13048) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10048, 11048, 12048, 13048) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c54: claim 5 jobs WHERE job3.id IN (10049, 11049, 12049, 13049) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10049, 11049, 12049, 13049) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10049	50049
12049	52049
set autocommit=0;
Connection c55: claim 5 jobs WHERE job3.id IN (10050, 11050, 12050, 13050) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10050, 11050, 12050, 13050) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c56: claim 5 jobs WHERE job3.id IN (10051, 11051, 12051, 13051) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10051, 11051, 12051, 13051) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11051	51051
13051	53051
set autocommit=0;
Connection c57: claim 5 jobs WHERE job3.id IN (10052, 11052, 12052, 13052) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10052, 11052, 12052, 13052) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c58: claim 5 jobs WHERE job3.id IN (10053, 11053, 12053, 13053) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10053, 11053, 12053, 13053) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10053	50053
12053	52053
set autocommit=0;
Connection c59: claim 5 jobs WHERE job3.id IN (10054, 11054, 12054, 13054) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10054, 11054, 12054, 13054) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c60: claim 5 jobs WHERE job3.id IN (10055, 11055, 12055, 13055) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10055, 11055, 12055, 13055) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11055	51055
13055	53055
set autocommit=0;
Connection c61: claim 5 jobs WHERE job3.id IN (10056, 11056, 12056, 13056) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10056, 11056, 12056, 13056) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c62: claim 5 jobs WHERE job3.id IN (10057, 11057, 12057, 13057) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10057, 11057, 12057, 13057) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10057	50057
12057	52057
set autocommit=0;
Connection c63: claim 5 jobs WHERE job3.id IN (10058, 11058, 12058, 13058) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10058, 11058, 12058, 13058) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c64: claim 5 jobs WHERE job3.id IN (10059, 11059, 12059, 13059) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10059, 11059, 12059, 13059) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11059	51059
13059	53059
set autocommit=0;
Connection c65: claim 5 jobs WHERE job3.id IN (10060, 11060, 12060, 13060) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10060, 11060, 12060, 13060) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c66: claim 5 jobs WHERE job3.id IN (10061, 11061, 12061, 13061) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10061, 11061, 12061, 13061) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10061	50061
12061	52061
set autocommit=0;
Connection c67: claim 5 jobs WHERE job3.id IN (10062, 11062, 12062, 13062) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10062, 11062, 12062, 13062) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c68: claim 5 jobs WHERE job3.id IN (10063, 11063, 12063, 13063) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10063, 11063, 12063, 13063) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11063	51063
13063	53063
set autocommit=0;
Connection c69: claim 5 jobs WHERE job3.id IN (10064, 11064, 12064, 13064) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10064, 11064, 12064, 13064) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c70: claim 5 jobs WHERE job3.id IN (10065, 11065, 12065, 13065) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10065, 11065, 12065, 13065) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10065	50065
12065	52065
set autocommit=0;
Connection c71: claim 5 jobs WHERE job3.id IN (10066, 11066, 12066, 13066) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10066, 11066, 12066, 13066) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c72: claim 5 jobs WHERE job3.id IN (10067, 11067, 12067, 13067) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10067, 11067, 12067, 13067) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11067	51067
13067	53067
set autocommit=0;
Connection c73: claim 5 jobs WHERE job3.id IN (10068, 11068, 12068, 13068) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10068, 11068, 12068, 13068) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c74: claim 5 jobs WHERE job3.id IN (10069, 11069, 12069, 13069) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10069, 11069, 12069, 13069) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10069	50069
12069	52069
set autocommit=0;
Connection c75: claim 5 jobs WHERE job3.id IN (10070, 11070, 12070, 13070) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10070, 11070, 12070, 13070) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c76: claim 5 jobs WHERE job3.id IN (10071, 11071, 12071, 13071) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10071, 11071, 12071, 13071) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11071	51071
13071	53071
set autocommit=0;
Connection c77: claim 5 jobs WHERE job3.id IN (10072, 11072, 12072, 13072) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10072, 11072, 12072, 13072) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c78: claim 5 jobs WHERE job3.id IN (10073, 11073, 12073, 13073) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10073, 11073, 12073, 13073) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10073	50073
12073	52073
set autocommit=0;
Connection c79: claim 5 jobs WHERE job3.id IN (10074, 11074, 12074, 13074) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10074, 11074, 12074, 13074) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c80: claim 5 jobs WHERE job3.id IN (10075, 11075, 12075, 13075) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10075, 11075, 12075, 13075) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11075	51075
13075	53075
set autocommit=0;
Connection c81: claim 5 jobs WHERE job3.id IN (10076, 11076, 12076, 13076) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10076, 11076, 12076, 13076) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c82: claim 5 jobs WHERE job3.id IN (10077, 11077, 12077, 13077) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10077, 11077, 12077, 13077) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10077	50077
12077	52077
set autocommit=0;
Connection c83: claim 5 jobs WHERE job3.id IN (10078, 11078, 12078, 13078) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10078, 11078, 12078, 13078) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c84: claim 5 jobs WHERE job3.id IN (10079, 11079, 12079, 13079) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10079, 11079, 12079, 13079) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11079	51079
13079	53079
set autocommit=0;
Connection c85: claim 5 jobs WHERE job3.id IN (10080, 11080, 12080, 13080) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10080, 11080, 12080, 13080) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c86: claim 5 jobs WHERE job3.id IN (10081, 11081, 12081, 13081) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10081, 11081, 12081, 13081) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10081	50081
12081	52081
set autocommit=0;
Connection c87: claim 5 jobs WHERE job3.id IN (10082, 11082, 12082, 13082) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10082, 11082, 12082, 13082) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c88: claim 5 jobs WHERE job3.id IN (10083, 11083, 12083, 13083) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10083, 11083, 12083, 13083) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11083	51083
13083	53083
set autocommit=0;
Connection c89: claim 5 jobs WHERE job3.id IN (10084, 11084, 12084, 13084) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10084, 11084, 12084, 13084) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c90: claim 5 jobs WHERE job3.id IN (10085, 11085, 12085, 13085) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10085, 11085, 12085, 13085) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10085	50085
12085	52085
set autocommit=0;
Connection c91: claim 5 jobs WHERE job3.id IN (10086, 11086, 12086, 13086) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10086, 11086, 12086, 13086) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c92: claim 5 jobs WHERE job3.id IN (10087, 11087, 12087, 13087) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10087, 11087, 12087, 13087) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11087	51087
13087	53087
set autocommit=0;
Connection c93: claim 5 jobs WHERE job3.id IN (10088, 11088, 12088, 13088) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10088, 11088, 12088, 13088) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c94: claim 5 jobs WHERE job3.id IN (10089, 11089, 12089, 13089) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10089, 11089, 12089, 13089) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10089	50089
12089	52089
set autocommit=0;
Connection c95: claim 5 jobs WHERE job3.id IN (10090, 11090, 12090, 13090) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10090, 11090, 12090, 13090) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c96: claim 5 jobs WHERE job3.id IN (10091, 11091, 12091, 13091) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10091, 11091, 12091, 13091) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11091	51091
13091	53091
set autocommit=0;
Connection c97: claim 5 jobs WHERE job3.id IN (10092, 11092, 12092, 13092) AND job3.state IN (3, 7, 12)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10092, 11092, 12092, 13092) AND job3.worker_guid IS NULL AND job3.state IN (3, 7, 12) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c98: claim 5 jobs WHERE job3.id IN (10093, 11093, 12093, 13093) AND job3.state IN (0, 4, 9)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10093, 11093, 12093, 13093) AND job3.worker_guid IS NULL AND job3.state IN (0, 4, 9) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
10093	50093
12093	52093
set autocommit=0;
Connection c99: claim 5 jobs WHERE job3.id IN (10094, 11094, 12094, 13094) AND job3.state IN (1, 5, 10)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10094, 11094, 12094, 13094) AND job3.worker_guid IS NULL AND job3.state IN (1, 5, 10) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
set autocommit=0;
Connection c100: claim 5 jobs WHERE job3.id IN (10095, 11095, 12095, 13095) AND job3.state IN (2, 6, 11)
SELECT job3.id AS job_id, job3.cur_attempt_id AS job_cur_attempt_id
FROM job3 INNER JOIN job3_attempt
ON job3_attempt.id = job3.cur_attempt_id AND job3.id = job3_attempt.job_id
WHERE job3.id IN (10095, 11095, 12095, 13095) AND job3.worker_guid IS NULL AND job3.state IN (2, 6, 11) AND job3_attempt.next_run_time <= 2000000
LIMIT 5 FOR UPDATE SKIP LOCKED;
job_id	job_cur_attempt_id
11095	51095
13095	53095
drop table job3, job3_attempt;
#########################################################################
###
### (12) INSERT INTO t SELECT * FROM t FOR UPDATE [SKIP LOCKED | NOWAIT]
###
#########################################################################
set autocommit=1;
select count(*) from t1;
count(*)
6
insert into t1 select * from t1 for update skip locked;
select count(*) from t1;
count(*)
12
insert into t1 select * from t1 for update nowait;
select count(*) from t1;
count(*)
24
### (13) Unsupported storage engines
create table t9 (a int primary key) engine=heap;
insert into t9 values (1), (2), (3);
Should succeed since no table gets involved
select 1 for update skip locked;
1
1
select * from nonexistence for update skip locked;
ERROR 42S02: Table 'test.nonexistence' doesn't exist
select * from t9 for update skip locked;
ERROR HY000: Table storage engine for 't9' doesn't have this option
select * from t9 where a > 1 and a < 3 for update skip locked;
ERROR HY000: Table storage engine for 't9' doesn't have this option
insert into t9 select * from t9 for update skip locked;
ERROR HY000: Table storage engine for 't9' doesn't have this option
Should succeed since no table gets involved
select 1 for update nowait;
1
1
select * from nonexistence for update nowait;
ERROR 42S02: Table 'test.nonexistence' doesn't exist
select * from t9 for update nowait;
ERROR HY000: Table storage engine for 't9' doesn't have this option
select * from t9 where a > 1 and a < 3 for update nowait;
ERROR HY000: Table storage engine for 't9' doesn't have this option
insert into t9 select * from t9 for update nowait;
ERROR HY000: Table storage engine for 't9' doesn't have this option
drop table t1, t2, t3, t4, t5, t6, t7, t8, t9;
